
#Область ПрограммныйИнтерфейс

#Область ПереходВДиадок

// Инициирует переход к документу в веб-интерфейсе Диадок
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма, из которой вызывается переход
//   Документ - ДокументСсылка - Ссылка на документ
//
Процедура ПерейтиКДокументуДиадок(Форма, Документ) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("Документ", Документ);
	
	Если НЕ ЗначениеЗаполнено(ПолучитьЛогинДиадок()) ИЛИ НЕ ЗначениеЗаполнено(ПолучитьПарольДиадок()) Тогда
		
		ОткрытьФорму("ОбщаяФорма.ФормаЗапросаДанныхДиадока", , , , , , 
			Новый ОписаниеОповещения("ПослеВводаУчетныхДанныхДиадок_ПерейтиКДокументу", ЭтотОбъект, ДополнительныеПараметры));
		
	Иначе
		
		ВыполнитьПереходКДокументуДиадок(Документ);
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает получение статуса документа из Диадок
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма, из которой вызывается операция
//   Документ - ДокументСсылка, Массив - Ссылка на документ или массив ссылок
//
Процедура ПолучитьСтатусДокументаДиадок(Форма, Документ) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("Документ", Документ);
	
	Если НЕ ЗначениеЗаполнено(ПолучитьЛогинДиадок()) ИЛИ НЕ ЗначениеЗаполнено(ПолучитьПарольДиадок()) Тогда
		
		ОткрытьФорму("ОбщаяФорма.ФормаЗапросаДанныхДиадока", , , , , , 
			Новый ОписаниеОповещения("ПослеВводаУчетныхДанныхДиадок_ПолучитьСтатус", ЭтотОбъект, ДополнительныеПараметры));
		
	Иначе
		
		ВыполнитьПолучениеСтатусаДокумента(Форма, Документ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиОповещений

// Обработчик оповещения после ввода учетных данных для перехода к документу
//
// Параметры:
//   ВыбранноеЗначение - Неопределено, Структура - Результат ввода учетных данных
//   ДополнительныеПараметры - Структура - Дополнительные параметры оповещения
//
Процедура ПослеВводаУчетныхДанныхДиадок_ПерейтиКДокументу(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		УстановитьПараметрыСеансаДиадок(ВыбранноеЗначение);
		
	КонецЕсли;
	
	ВыполнитьПереходКДокументуДиадок(ДополнительныеПараметры.Документ);
	
КонецПроцедуры

// Обработчик оповещения после ввода учетных данных для получения статуса
//
// Параметры:
//   ВыбранноеЗначение - Неопределено, Структура - Результат ввода учетных данных
//   ДополнительныеПараметры - Структура - Дополнительные параметры оповещения
//
Процедура ПослеВводаУчетныхДанныхДиадок_ПолучитьСтатус(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		УстановитьПараметрыСеансаДиадок(ВыбранноеЗначение);
		
	КонецЕсли;
	
	ВыполнитьПолучениеСтатусаДокумента(ДополнительныеПараметры.Форма, ДополнительныеПараметры.Документ);
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеОпераций

// Выполняет переход к документу в веб-интерфейсе Диадок
//
// Параметры:
//   Документ - ДокументСсылка - Ссылка на документ
//
Процедура ВыполнитьПереходКДокументуДиадок(Документ)
	
	ГиперссылкаНаДокумент = ПолучитьГиперссылкуНаДокументДиадок(ПолучитьЛогинДиадок(), ПолучитьПарольДиадок(), 
		ПолучитьКлючРазработчикаДиадок(), Документ);
	
	Если ЗначениеЗаполнено(ГиперссылкаНаДокумент) Тогда
		
		ЗапуститьПриложение(ГиперссылкаНаДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет получение статуса документа из Диадок
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма для обновления
//   Документ - ДокументСсылка, Массив - Ссылка на документ или массив ссылок
//
Процедура ВыполнитьПолучениеСтатусаДокумента(Форма, Документ)
	
	ЛогинДиадок = ПолучитьЛогинДиадок();
	ПарольДиадок = ПолучитьПарольДиадок();
	КлючРазработчикаДиадок = ПолучитьКлючРазработчикаДиадок();
	
	Если ТипЗнч(Документ) = Тип("Массив") Тогда
		
		Для Каждого ДокументЭлемент ИЗ Документ Цикл
			
			СтатусДиадок = ПолучитьСтатусДокументаИзAPI(ЛогинДиадок, ПарольДиадок, КлючРазработчикаДиадок, ДокументЭлемент);
			
			Если ЗначениеЗаполнено(СтатусДиадок) Тогда
				
				СохранитьСтатусДокументаНаСервере(СтатусДиадок, ДокументЭлемент);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		СтатусДиадок = ПолучитьСтатусДокументаИзAPI(ЛогинДиадок, ПарольДиадок, КлючРазработчикаДиадок, Документ);
		
		Если ЗначениеЗаполнено(СтатусДиадок) Тогда
			
			СохранитьСтатусДокументаНаСервере(СтатусДиадок, Документ);
			
			// Обновляем реквизит формы, если это форма документа (не список)
			Попытка
				Форма.СтатусДиадок = СтатусДиадок;
			Исключение
				// Реквизит СтатусДиадок отсутствует на форме, это нормально для форм списков
				Возврат;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПараметрамиСеанса

// Устанавливает параметры сеанса Диадок на сервере
//
// Параметры:
//   УчетныеДанные - Структура - Структура с ключами: Логин, Пароль, КлючРазработчикаДиадок
//
Процедура УстановитьПараметрыСеансаДиадок(УчетныеДанные)
	
	УстановитьПараметрСеансаНаСервере("ЛогинДиадок", УчетныеДанные.Логин);
	УстановитьПараметрСеансаНаСервере("ПарольДиадок", УчетныеДанные.Пароль);
	УстановитьПараметрСеансаНаСервере("КлючРазработчикаДиадок", УчетныеДанные.КлючРазработчикаДиадок);
	
КонецПроцедуры

#КонецОбласти

#Область ВызовыСервера

// Получает логин Диадок с сервера
//
// Возвращаемое значение:
//   Строка - Логин пользователя
// 
Функция ПолучитьЛогинДиадок()
	
	Возврат MRS_ИнтеграцияДиадокСервер.ПолучитьЛогинДиадок();
	
КонецФункции

// Получает пароль Диадок с сервера
//
// Возвращаемое значение:
//   Строка - Пароль пользователя
//
Функция ПолучитьПарольДиадок()
	
	Возврат MRS_ИнтеграцияДиадокСервер.ПолучитьПарольДиадок();
	
КонецФункции

// Получает ключ разработчика Диадок с сервера
//
// Возвращаемое значение:
//   Строка - Ключ API
//
Функция ПолучитьКлючРазработчикаДиадок()
	
	Возврат MRS_ИнтеграцияДиадокСервер.ПолучитьКлючРазработчикаДиадок();
	
КонецФункции

// Устанавливает параметр сеанса на сервере
//
// Параметры:
//   ИмяПараметра - Строка - Имя параметра
//   Значение - Произвольный - Значение параметра
//
Процедура УстановитьПараметрСеансаНаСервере(Знач ИмяПараметра, Знач Значение)
	
	MRS_ИнтеграцияДиадокСервер.УстановитьПараметрСеанса(ИмяПараметра, Значение);
	
КонецПроцедуры

// Получает гиперссылку на документ в Диадок
//
// Параметры:
//   ЛогинНаСайтДиадок - Строка - Логин пользователя
//   ПарольНаСайтДиадок - Строка - Пароль пользователя
//   КлючРазработчика - Строка - Ключ API
//   Документ - ДокументСсылка - Ссылка на документ
//
// Возвращаемое значение:
//   Строка - URL документа
//
Функция ПолучитьГиперссылкуНаДокументДиадок(ЛогинНаСайтДиадок, ПарольНаСайтДиадок, КлючРазработчика, Документ)
	
	Возврат MRS_ИнтеграцияДиадокСервер.ПолучитьСсылкуНаДокументДиадок(ЛогинНаСайтДиадок, ПарольНаСайтДиадок, КлючРазработчика, Документ);
	
КонецФункции

// Получает статус документа из API Диадок
//
// Параметры:
//   ЛогинНаСайтДиадок - Строка - Логин пользователя
//   ПарольНаСайтДиадок - Строка - Пароль пользователя
//   КлючРазработчика - Строка - Ключ API
//   Документ - ДокументСсылка - Ссылка на документ
//
// Возвращаемое значение:
//   Строка - Статус документа
//
Функция ПолучитьСтатусДокументаИзAPI(ЛогинНаСайтДиадок, ПарольНаСайтДиадок, КлючРазработчика, Документ)
	
	Возврат MRS_ИнтеграцияДиадокСервер.ПолучитьСтруктуруДокументаПоAPIДиадок(ЛогинНаСайтДиадок, ПарольНаСайтДиадок, КлючРазработчика, Документ);
	
КонецФункции

// Сохраняет статус документа на сервере
//
// Параметры:
//   Статус - Строка - Статус документа
//   Документ - ДокументСсылка - Ссылка на документ
//
Процедура СохранитьСтатусДокументаНаСервере(Статус, Документ)
	
	MRS_ИнтеграцияДиадокСервер.СохранитьСтатусДокумента(Статус, Документ);
	
КонецПроцедуры

// Проверяет данные аутентификации в Диадок
//
// Параметры:
//   Логин - Строка - Логин пользователя Диадок
//   Пароль - Строка - Пароль пользователя Диадок
//
// Возвращаемое значение:
//   Структура - Результат проверки с ключами: Успех (Булево), ТекстОшибки (Строка)
//
Функция ПроверитьДанныеАвторизации(Логин, Пароль) Экспорт
	
	Возврат MRS_ИнтеграцияДиадокСервер.ПроверитьДанныеАвторизации(Логин, Пароль);
	
КонецФункции

#КонецОбласти

#КонецОбласти

