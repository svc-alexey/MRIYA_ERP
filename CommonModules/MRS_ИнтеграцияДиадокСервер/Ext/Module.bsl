
#Область ПрограммныйИнтерфейс

#Область РаботаСПараметрамиСеанса

// Получает логин Диадок из параметров сеанса
//
// Возвращаемое значение:
//   Строка - Логин пользователя Диадок или пустая строка, если параметр не заполнен
//
Функция ПолучитьЛогинДиадок() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		Результат = ПараметрыСеанса.ЛогинДиадок;
		
	Исключение
		
		Результат = "";
		
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Получает пароль Диадок из параметров сеанса
//
// Возвращаемое значение:
//   Строка - Пароль пользователя Диадок или пустая строка, если параметр не заполнен
//
Функция ПолучитьПарольДиадок() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		Результат = ПараметрыСеанса.ПарольДиадок;
		
	Исключение
		
		Результат = "";
		
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Получает ключ разработчика Диадок из параметров сеанса
// 
// Параметры:
//   ОрганизацияДокумента - СправочникСсылка.Организации - Организация документа
// Возвращаемое значение:
//   Строка - Ключ API Диадок или пустая строка, если параметр не заполнен
//
Функция ПолучитьКлючРазработчикаДиадок(ОрганизацияДокумента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка		
		Результат = ПолучитьКлючРазработчикаОрганизацииДокумента(ОрганизацияДокумента);		
	Исключение
		//не удалось получить ключ				
		Результат = "";
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Устанавливает значение параметра сеанса
//
// Параметры:
//   ИмяПараметра - Строка - Имя параметра сеанса
//   Значение - Произвольный - Устанавливаемое значение
//
Процедура УстановитьПараметрСеанса(Знач ИмяПараметра, Значение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыСеанса[ИмяПараметра] = Значение;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДиадокAPI

// Проверяет данные аутентификации пользователя Диадок
//
// Параметры:
//   ЛогинНаСайтДиадок - Строка - Логин пользователя Диадок
//   ПарольНаСайтДиадок - Строка - Пароль пользователя Диадок
//
// Возвращаемое значение:
//   Структура - Структура с ключами:
//     * Успех - Булево - Признак успешной аутентификации
//     * ТекстОшибки - Строка - Текст ошибки, если аутентификация не удалась
//
Функция ПроверитьДанныеАвторизации(ЛогинНаСайтДиадок, ПарольНаСайтДиадок) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	
	Если НЕ ЗначениеЗаполнено(ЛогинНаСайтДиадок) Тогда
		Результат.ТекстОшибки = "Не заполнен логин";
		Возврат Результат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПарольНаСайтДиадок) Тогда
		Результат.ТекстОшибки = "Не заполнен пароль";
		Возврат Результат;
	КонецЕсли;
	
	// Для проверки данных авторизации используем первый доступный ключ из организаций
	// или ключ по умолчанию "1C"
	КлючРазработчика = ПолучитьКлючДляПроверкиАвторизации();
	
	Попытка
		
		АдресРесурса = "/Authenticate?login=" + ЛогинНаСайтДиадок + "&password=" + ПарольНаСайтДиадок;
		АдресСайта = "diadoc-api.kontur.ru";
		
		HTTPЗапрос = Новый HTTPЗапрос;
		HTTPЗапрос.Заголовки.Вставить("POST " + АдресРесурса + " HTTP/1.1");
		HTTPЗапрос.Заголовки.Вставить("Host", АдресСайта);
		HTTPЗапрос.Заголовки.Вставить("Content-Length", 0);
		HTTPЗапрос.Заголовки.Вставить("Authorization", "DiadocAuth ddauth_api_client_id=" + КлючРазработчика);
		HTTPЗапрос.АдресРесурса = АдресРесурса;
		
		Соединение = Новый HTTPСоединение(АдресСайта, , , , , 60, Новый ЗащищенноеСоединениеOpenSSL(), Ложь);
		ФайлРезультата = ПолучитьИмяВременногоФайла();
		
		Попытка
			
			Соединение.ОтправитьДляОбработки(HTTPЗапрос, ФайлРезультата);
			
			Ответ = Новый ТекстовыйДокумент();
			Ответ.Прочитать(ФайлРезультата, КодировкаТекста.UTF8);
			ТекстОтвета = Ответ.ПолучитьТекст();
			
		Исключение
			
			УдалитьФайлы(ФайлРезультата);
			ВызватьИсключение;
			
		КонецПопытки;
		
		УдалитьФайлы(ФайлРезультата);
		
		// Проверяем ответ на наличие ошибок
		Если Найти(ТекстОтвета, "Wrong") > 0 Тогда
			Результат.ТекстОшибки = "Неверный логин или пароль";
			Возврат Результат;
		КонецЕсли;
		
		// Если дошли сюда - аутентификация успешна
		Результат.Успех = Истина;
		
	Исключение
		
		Результат.ТекстОшибки = "Ошибка подключения к Диадок: " + ОписаниеОшибки();
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Получает структуру документа через API Диадок
//
// Параметры:
//   ЛогинНаСайтДиадок - Строка - Логин пользователя Диадок
//   ПарольНаСайтДиадок - Строка - Пароль пользователя Диадок
//   КлючРазработчика - Строка - Ключ API разработчика
//   Документ - ДокументСсылка - Ссылка на документ
//
// Возвращаемое значение:
//   Строка - Статус документа или пустая строка в случае ошибки
//
Функция ПолучитьСтруктуруДокументаПоAPIДиадок(ЛогинНаСайтДиадок, ПарольНаСайтДиадок, КлючРазработчика, Документ) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстТЗ = "";
	
	Попытка
		
		АдресРесурса = "/Authenticate?login=" + ЛогинНаСайтДиадок + "&password=" + ПарольНаСайтДиадок;
		АдресСайта = "diadoc-api.kontur.ru";
		HTTPЗапрос2 = Новый HTTPЗапрос;
		HTTPЗапрос2.Заголовки.Вставить("POST " + АдресРесурса + " HTTP/1.1");
		HTTPЗапрос2.Заголовки.Вставить("Host", "diadoc-api.kontur.ru");
		HTTPЗапрос2.Заголовки.Вставить("Content-Length", 0);
		HTTPЗапрос2.Заголовки.Вставить("Authorization", "DiadocAuth ddauth_api_client_id=" + КлючРазработчика);
		HTTPЗапрос2.АдресРесурса = АдресРесурса;
		Соединение1 = Новый HTTPСоединение(АдресСайта, , , , , 60, Новый ЗащищенноеСоединениеOpenSSL(), Ложь);
		ФайлРезультата = ПолучитьИмяВременногоФайла();
		
		Попытка
			Соединение1.ОтправитьДляОбработки(HTTPЗапрос2, ФайлРезультата);
			Ответ = Новый ТекстовыйДокумент();
			Ответ.Прочитать(ФайлРезультата, КодировкаТекста.UTF8);
			ПолеДокумента1 = Ответ.ПолучитьТекст();
		Исключение
			УдалитьФайлы(ФайлРезультата);
			ВызватьИсключение;
		КонецПопытки;
		
		УдалитьФайлы(ФайлРезультата);
		
		boxId = ПолучитьИдентификаторЯщикаДокумента(Документ);
		Гуид = ПолучитьИдентификаторДокумента(Документ);
		messageId = Лев(Гуид, 36);
		entityId = СтрЗаменить(Гуид, messageId, "");
		
		АдресСайта = "diadoc-api.kontur.ru/V3/GetDocument?boxId=" + boxId + "&messageId=" + messageId + "&entityId=" + entityId;
		HTTPЗапрос2 = Новый HTTPЗапрос;
		HTTPЗапрос2.Заголовки.Вставить("GET /V3/GetDocument HTTP/1.1");
		HTTPЗапрос2.Заголовки.Вставить("Host", "diadoc-api.kontur.ru");
		HTTPЗапрос2.Заголовки.Вставить("Accept", "application/json");
		HTTPЗапрос2.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
		HTTPЗапрос2.Заголовки.Вставить("Authorization", "DiadocAuth ddauth_api_client_id=" + КлючРазработчика + ",ddauth_token=" + ПолеДокумента1);
		Соединение1 = Новый HTTPСоединение(АдресСайта, , , , , 60, Новый ЗащищенноеСоединениеOpenSSL(), Ложь);
		ОтветHTTP = Соединение1.Получить(HTTPЗапрос2);
		ТекстТЗ = ОтветHTTP.ПолучитьТелоКакСтроку();
		
	Исключение
		Возврат "";
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(ТекстТЗ) Тогда
		Возврат "";
	КонецЕсли;
	
	Попытка
		
		Статусы = ПолучитьСоответствиеСтатусовДокументов();
		
		СтруктураJson1 = ПрочитатьДанныеJSON(ТекстТЗ);
		
		Попытка
			Статус_ = Статусы.Получить(СтруктураJson1.RecipientReceiptMetadata.ReceiptStatus);
		Исключение
			Статус_ = "";
		КонецПопытки;
		
		Если Статус_ = Неопределено Тогда
			Статус_ = "";
		КонецЕсли;
		
		Попытка
			Статус = СтруктураJson1.DocflowStatus.PrimaryStatus.StatusText;
		Исключение
			Статус = "";
		КонецПопытки;
		
		Возврат Статус_ + ?(ЗначениеЗаполнено(Статус_), ", ", "") + Статус;
		
	Исключение
		Возврат ТекстТЗ;
	КонецПопытки;
	
КонецФункции

// Получает ссылку на документ в веб-интерфейсе Диадок
//
// Параметры:
//   ЛогинНаСайтДиадок - Строка - Логин пользователя Диадок
//   ПарольНаСайтДиадок - Строка - Пароль пользователя Диадок
//   КлючРазработчика - Строка - Ключ API разработчика
//   Документ - ДокументСсылка - Ссылка на документ
//
// Возвращаемое значение:
//   Строка - URL документа в Диадок или пустая строка в случае ошибки
//
Функция ПолучитьСсылкуНаДокументДиадок(ЛогинНаСайтДиадок, ПарольНаСайтДиадок, КлючРазработчика, Документ) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Возврат "";
	КонецЕсли;
	
	Попытка
		
		АдресРесурса = "/Authenticate?login=" + ЛогинНаСайтДиадок + "&password=" + ПарольНаСайтДиадок;
		АдресСайта = "diadoc-api.kontur.ru";
		HTTPЗапрос2 = Новый HTTPЗапрос;
		HTTPЗапрос2.Заголовки.Вставить("POST " + АдресРесурса + " HTTP/1.1");
		HTTPЗапрос2.Заголовки.Вставить("Host", "diadoc-api.kontur.ru");
		HTTPЗапрос2.Заголовки.Вставить("Content-Length", 0);
		HTTPЗапрос2.Заголовки.Вставить("Authorization", "DiadocAuth ddauth_api_client_id=" + КлючРазработчика);
		HTTPЗапрос2.АдресРесурса = АдресРесурса;
		Соединение1 = Новый HTTPСоединение(АдресСайта, , , , , 60, Новый ЗащищенноеСоединениеOpenSSL(), Ложь);
		ФайлРезультата = ПолучитьИмяВременногоФайла();
		
		Попытка
			Соединение1.ОтправитьДляОбработки(HTTPЗапрос2, ФайлРезультата);
			Ответ = Новый ТекстовыйДокумент();
			Ответ.Прочитать(ФайлРезультата, КодировкаТекста.UTF8);
		Исключение
			УдалитьФайлы(ФайлРезультата);
			ВызватьИсключение;
		КонецПопытки;
		
		УдалитьФайлы(ФайлРезультата);
		
		boxId = ПолучитьИдентификаторЯщикаДокумента(Документ);
		Гуид_ДляСсылки = ПолучитьИдентификаторДокументаДляСсылки(Документ);
		
		Результат = Новый Структура;
		Результат.Вставить("LetterID", Лев(Гуид_ДляСсылки, 36));
		Результат.Вставить("DocumentID", Прав(Гуид_ДляСсылки, 36));
		
		Возврат MRS_ИнтеграцияДиадокКлиентСервер.СформироватьСсылкуВБраузере(
			MRS_ИнтеграцияДиадокКлиентСервер.АдресЯщикаВИдентификатор(boxId), Результат.LetterID, Результат.DocumentID);
		
	Исключение
		Возврат "";
	КонецПопытки;
	
КонецФункции

// Сохраняет статус документа в регистр сведений
//
// Параметры:
//   Статус - Строка - Статус документа
//   Документ - ДокументСсылка - Ссылка на документ
//
Процедура СохранитьСтатусДокумента(Статус, Документ) Экспорт
	
	СвДата = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("ИдентификаторДляФормул", "ДатаПолученияСтатуса");
	СвСтатус = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("ИдентификаторДляФормул", "СтатусДиадок");
	
	ДопРекиСведПустаяСсылка = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка();
	
	Если СвДата = ДопРекиСведПустаяСсылка ИЛИ СвСтатус = ДопРекиСведПустаяСсылка Тогда
		Возврат;
	КонецЕсли;
	
	ДопСведенияНаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	ДопСведенияНаборЗаписей.Отбор.Объект.Установить(Документ);
	ДопСведенияНаборЗаписей.Отбор.Свойство.Установить(СвДата);
	ДопСведенияНаборЗаписей.Прочитать();
	
	Если ДопСведенияНаборЗаписей.Количество() = 0 Тогда
		НовЗапись = ДопСведенияНаборЗаписей.Добавить();
	Иначе
		НовЗапись = ДопСведенияНаборЗаписей[0];
	КонецЕсли;
	
	НовЗапись.Объект = Документ;
	НовЗапись.Свойство = СвДата;
	НовЗапись.Значение = ТекущаяДатаСеанса();
	ДопСведенияНаборЗаписей.Записать(Истина);
	
	ДопСведенияНаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	ДопСведенияНаборЗаписей.Отбор.Объект.Установить(Документ);
	ДопСведенияНаборЗаписей.Отбор.Свойство.Установить(СвСтатус);
	ДопСведенияНаборЗаписей.Прочитать();
	
	Если ДопСведенияНаборЗаписей.Количество() = 0 Тогда
		НовЗапись = ДопСведенияНаборЗаписей.Добавить();
	Иначе
		НовЗапись = ДопСведенияНаборЗаписей[0];
	КонецЕсли;
	
	НовЗапись.Объект = Документ;
	НовЗапись.Свойство = СвСтатус;
	НовЗапись.Значение = Статус;
	
	ДопСведенияНаборЗаписей.Записать(Истина);
	
КонецПроцедуры

// Получает статус документа из регистра сведений
//
// Параметры:
//   Документ - ДокументСсылка - Ссылка на документ
//
// Возвращаемое значение:
//   Строка - Статус документа или пустая строка, если статус не найден
//
Функция ПолучитьСтатусДокумента(Документ) Экспорт
	
	СвСтатус = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("ИдентификаторДляФормул", "СтатусДиадок");
	
	ДопРекиСведПустаяСсылка = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка();
	
	Если СвСтатус = ДопРекиСведПустаяСсылка Тогда
		Возврат "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеСведения.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Объект = &Объект
		|	И ДополнительныеСведения.Свойство = &Свойство";
	
	Запрос.УстановитьПараметр("Объект", Документ);
	Запрос.УстановитьПараметр("Свойство", СвСтатус);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Строка(Выборка.Значение);
	
КонецФункции

#КонецОбласти

#Область МассоваяОбработкаДокументов

// Получает соответствие организаций и документов для массовой обработки
//
// Параметры:
//   МассивДокументов - Массив из ДокументСсылка - Массив ссылок на документы
//
// Возвращаемое значение:
//   Соответствие - Ключ: СправочникСсылка.Организации, Значение: Массив из ДокументСсылка
//
Функция ПолучитьОрганизацииДокументов(МассивДокументов) Экспорт
	
	Результат = Новый Соответствие;
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Формируем запрос для получения организаций документов
	ТекстЗапроса = "";
	Индекс = 0;
	
	Для Каждого Документ Из МассивДокументов Цикл
		
		ТипДокумента = ТипЗнч(Документ);
		ИмяТаблицы = Метаданные.НайтиПоТипу(ТипДокумента).ПолноеИмя();
		
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ДокументТаблица.Ссылка КАК Ссылка,
		|	ДокументТаблица.Организация КАК Организация
		|ИЗ
		|	" + ИмяТаблицы + " КАК ДокументТаблица
		|ГДЕ
		|	ДокументТаблица.Ссылка = &Документ" + Формат(Индекс, "ЧГ=");
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Индекс = 0;
	
	Для Каждого Документ Из МассивДокументов Цикл
		Запрос.УстановитьПараметр("Документ" + Формат(Индекс, "ЧГ="), Документ);
		Индекс = Индекс + 1;
	КонецЦикла;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.Организация) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивДокументовОрганизации = Результат.Получить(Выборка.Организация);
		
		Если МассивДокументовОрганизации = Неопределено Тогда
			МассивДокументовОрганизации = Новый Массив;
			Результат.Вставить(Выборка.Организация, МассивДокументовОрганизации);
		КонецЕсли;
		
		МассивДокументовОрганизации.Добавить(Выборка.Ссылка);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Получает статусы документов массово с учетом разных организаций
//
// Параметры:
//   МассивДокументов - Массив из ДокументСсылка - Массив ссылок на документы
//   ЛогинДиадок - Строка - Логин пользователя Диадок
//   ПарольДиадок - Строка - Пароль пользователя Диадок
//
// Возвращаемое значение:
//   Структура - Результаты обработки с ключами:
//     * ВсегоДокументов - Число
//     * УспешноОбработано - Число
//     * СОшибками - Число
//     * ОрганизацииБезКлюча - Массив из Структура
//     * ОшибкиПоДокументам - Соответствие
//     * ДокументыБезИдентификаторов - Массив
//
Функция ПолучитьСтатусыДокументовМассово(МассивДокументов, ЛогинДиадок, ПарольДиадок) Экспорт
	
	РезультатОбработки = Новый Структура;
	РезультатОбработки.Вставить("ВсегоДокументов", МассивДокументов.Количество());
	РезультатОбработки.Вставить("УспешноОбработано", 0);
	РезультатОбработки.Вставить("СОшибками", 0);
	РезультатОбработки.Вставить("ОрганизацииБезКлюча", Новый Массив);
	РезультатОбработки.Вставить("ОшибкиПоДокументам", Новый Соответствие);
	РезультатОбработки.Вставить("ДокументыБезИдентификаторов", Новый Массив);
	
	// Группируем документы по организациям
	СоответствиеОрганизацияДокументы = ПолучитьОрганизацииДокументов(МассивДокументов);
	
	// Обрабатываем документы для каждой организации
	Для Каждого ЭлементСоответствия Из СоответствиеОрганизацияДокументы Цикл
		
		Организация = ЭлементСоответствия.Ключ;
		МассивДокументовОрганизации = ЭлементСоответствия.Значение;
		
		// Получаем ключ разработчика для организации
		КлючРазработчика = ПолучитьКлючРазработчикаОрганизацииДокумента(Организация);
		
		Если НЕ ЗначениеЗаполнено(КлючРазработчика) Тогда
			
			// Организация без API-ключа
			СтруктураОшибки = Новый Структура;
			СтруктураОшибки.Вставить("Организация", Организация);
			СтруктураОшибки.Вставить("Наименование", Строка(Организация));
			СтруктураОшибки.Вставить("КоличествоДокументов", МассивДокументовОрганизации.Количество());
			РезультатОбработки.ОрганизацииБезКлюча.Добавить(СтруктураОшибки);
			
			РезультатОбработки.СОшибками = РезультатОбработки.СОшибками + МассивДокументовОрганизации.Количество();
			
			Продолжить;
			
		КонецЕсли;
		
		// Обрабатываем документы организации
		Для Каждого Документ Из МассивДокументовОрганизации Цикл
			
			Попытка
				
				// Проверяем наличие идентификаторов документа
				ИдентификаторДокумента = ПолучитьИдентификаторДокумента(Документ);
				ИдентификаторЯщика = ПолучитьИдентификаторЯщикаДокумента(Документ);
				
				Если НЕ ЗначениеЗаполнено(ИдентификаторДокумента) ИЛИ НЕ ЗначениеЗаполнено(ИдентификаторЯщика) Тогда
					
					РезультатОбработки.ДокументыБезИдентификаторов.Добавить(Документ);
					Продолжить;
					
				КонецЕсли;
				
				// Получаем статус документа из API
				СтатусДиадок = ПолучитьСтруктуруДокументаПоAPIДиадок(ЛогинДиадок, ПарольДиадок, КлючРазработчика, Документ);
				
				Если ЗначениеЗаполнено(СтатусДиадок) Тогда
					
					// Сохраняем статус
					СохранитьСтатусДокумента(СтатусДиадок, Документ);
					РезультатОбработки.УспешноОбработано = РезультатОбработки.УспешноОбработано + 1;
					
				Иначе
					
					РезультатОбработки.ОшибкиПоДокументам.Вставить(Документ, "Не удалось получить статус из API Диадок");
					РезультатОбработки.СОшибками = РезультатОбработки.СОшибками + 1;
					
				КонецЕсли;
				
			Исключение
				
				ТекстОшибки = ОписаниеОшибки();
				РезультатОбработки.ОшибкиПоДокументам.Вставить(Документ, ТекстОшибки);
				РезультатОбработки.СОшибками = РезультатОбработки.СОшибками + 1;
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат РезультатОбработки;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает ключ АПИ из регистра дополнительных сведений спр. Организации
//
// Параметры:
//   ОрганизацияДокумента - СправочникСсылка - Ссылка на справочник 
//
// Возвращаемое значение:
//   Строка - Ключ API, предоставленный СКБ Контур для интеграции с Диадок
//
Функция ПолучитьКлючРазработчикаОрганизацииДокумента(ОрганизацияДокумента)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения
	|ГДЕ
	|	Свойство = &MRS_КлючРазработчикаДиадок
	|	И Объект = &Объект
	|	И НЕ Значение ПОДОБНО ""усл:%""");
	
	Запрос.УстановитьПараметр("Объект", ОрганизацияДокумента);
	Запрос.УстановитьПараметр("MRS_КлючРазработчикаДиадок", 
		ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("MRS_КлючРазработчикаДиадок"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Если ЗначениеЗаполнено(Выборка.Значение) Тогда
			Возврат Выборка.Значение;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

// Получает API-ключ для проверки авторизации пользователя
// Используется первый найденный ключ из любой организации
//
// Возвращаемое значение:
//   Строка - API-ключ для проверки авторизации или пустая строка, если ключи не найдены
//
Функция ПолучитьКлючДляПроверкиАвторизации()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДополнительныеСведения.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Свойство = &MRS_КлючРазработчикаДиадок
	|	И НЕ ДополнительныеСведения.Значение ПОДОБНО ""усл:%""
	|	И ДополнительныеСведения.Значение <> """"");
	
	Запрос.УстановитьПараметр("MRS_КлючРазработчикаДиадок", 
		ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("MRS_КлючРазработчикаДиадок"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Если ЗначениеЗаполнено(Выборка.Значение) Тогда
			Возврат Выборка.Значение;
		КонецЕсли;
		
	КонецЕсли;
	
	// Если не нашли ключ ни в одной организации, возвращаем ключ по умолчанию "1C"
	Возврат "1C";
	
КонецФункции

// Получает идентификатор документа из регистра дополнительных сведений
//
// Параметры:
//   Документ - ДокументСсылка - Ссылка на документ
//
// Возвращаемое значение:
//   Строка - Идентификатор документа
//
Функция ПолучитьИдентификаторДокумента(Документ)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения
	|ГДЕ
	|	Свойство = &ИдентификаторДокументаВДиадок
	|	И Объект = &Объект
	|	И НЕ Значение ПОДОБНО ""усл:%""");
	
	Запрос.УстановитьПараметр("Объект", Документ);
	Запрос.УстановитьПараметр("ИдентификаторДокументаВДиадок", 
		ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("ИдентификаторДокументаВДиадок"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Если ЗначениеЗаполнено(Выборка.Значение) Тогда
			Возврат КонвертироватьЧисло64вГуид(Выборка.Значение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

// Получает идентификатор документа для ссылки из регистра дополнительных сведений
//
// Параметры:
//   Документ - ДокументСсылка - Ссылка на документ
//
// Возвращаемое значение:
//   Строка - Идентификатор документа для формирования ссылки
//
Функция ПолучитьИдентификаторДокументаДляСсылки(Документ)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения
	|ГДЕ
	|	Свойство = &ИдентификаторДокументаВДиадок
	|	И Объект = &Объект
	|	И НЕ Значение ПОДОБНО ""усл:%""");
	
	Запрос.УстановитьПараметр("Объект", Документ);
	Запрос.УстановитьПараметр("ИдентификаторДокументаВДиадок", 
		ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("ИдентификаторДокументаВДиадок"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Если ЗначениеЗаполнено(Выборка.Значение) Тогда
			Возврат MRS_ИнтеграцияДиадокКлиентСервер.Base64_2_GUID(Выборка.Значение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

// Получает идентификатор ящика документа из регистра дополнительных сведений
//
// Параметры:
//   Документ - ДокументСсылка - Ссылка на документ
//
// Возвращаемое значение:
//   Строка - Идентификатор ящика
//
Функция ПолучитьИдентификаторЯщикаДокумента(Документ)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения
	|ГДЕ
	|	Свойство = &ИдентификаторДокументаВДиадок
	|	И Объект = &Объект
	|	И НЕ Значение ПОДОБНО ""усл:%""");
	
	Запрос.УстановитьПараметр("Объект", Документ);
	Запрос.УстановитьПараметр("ИдентификаторДокументаВДиадок", 
		ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("ИдентификаторЯщикДокументаВДиадок"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Если ЗначениеЗаполнено(Выборка.Значение) Тогда
			Возврат Выборка.Значение;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

// Конвертирует Base64 строку в GUID
//
// Параметры:
//   СтрокаBase64 - Строка - Строка в формате Base64
//
// Возвращаемое значение:
//   Строка - GUID
//
Функция КонвертироватьЧисло64вГуид(СтрокаBase64)
	
	СтрокаHex = Прав(MRS_ИнтеграцияДиадокКлиентСервер.Convert_Binary_to_Hex(
		MRS_ИнтеграцияДиадокКлиентСервер.Convert_Base64_to_Binary(СтрокаBase64)), 64);
	
	Возврат MRS_ИнтеграцияДиадокКлиентСервер.Convert_Hex_to_GUID(СтрокаHex);
	
КонецФункции

// Читает данные из JSON строки
//
// Параметры:
//   ТекстОтвета - Строка - JSON строка
//
// Возвращаемое значение:
//   Произвольный - Десериализованные данные
//
Функция ПрочитатьДанныеJSON(ТекстОтвета)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстОтвета);
	Объект1с = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Возврат Объект1с;
	
КонецФункции

// Возвращает соответствие статусов документов API Диадок
//
// Возвращаемое значение:
//   Соответствие - Соответствие кодов статусов и их текстовых представлений
//
Функция ПолучитьСоответствиеСтатусовДокументов()
	
	Результат = Новый Соответствие;
	
	Результат.Вставить("RevocationAccepted", "Аннулирован");
	Результат.Вставить("Finished", "Документооборот завершен");
	Результат.Вставить("RevocationIsRequestedByMe", "Ожидается аннулирование");
	Результат.Вставить("InvalidSenderSignature", "Ошибка подписи");
	Результат.Вставить("RoamingNotificationError", "Ошибка доставки документа через роуминг");
	Результат.Вставить("WithRecipientSignature", "Подписан контрагентом");
	Результат.Вставить("RequestsMyRevocation", "Требуется аннулирование");
	Результат.Вставить("HaveToCreateReceipt", "Требуется подписать извещение");
	Результат.Вставить("InvoiceAmendmentRequested", "Требуется уточнение");
	Результат.Вставить("RecipientSignatureRequestRejected", "Отказано в подписи контрагенту");
	Результат.Вставить("WaitingForRecipientSignature", "Требуется подпись");
	Результат.Вставить("WaitingForReceipt", "Ожидается извещение о получении");
	Результат.Вставить("WaitingForProxySignature", "Ожидается промежуточная подпись");
	Результат.Вставить("ProxySignatureRejected", "Отказано в промежуточной подписи");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

