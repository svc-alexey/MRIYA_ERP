
#Область ПрограммныйИнтерфейс

#Область Утилиты

// Подставляет параметры в строку-шаблон
//
// Параметры:
//   ШаблонСтроки - Строка - Шаблон строки с маркерами подстановки %1, %2 и т.д.
//   Параметр1 - Произвольный - Значение для подстановки вместо %1
//   Параметр2 - Произвольный - Значение для подстановки вместо %2
//   Параметр3 - Произвольный - Значение для подстановки вместо %3
//   Параметр4 - Произвольный - Значение для подстановки вместо %4
//   Параметр5 - Произвольный - Значение для подстановки вместо %5
//   Параметр6 - Произвольный - Значение для подстановки вместо %6
//
// Возвращаемое значение:
//   Строка - Строка с подставленными параметрами
//
Функция ПодставитьПараметрыВСтроку(ШаблонСтроки, Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, 
	Параметр4 = Неопределено, Параметр5 = Неопределено, Параметр6 = Неопределено) Экспорт
	
	Результат = СтрЗаменить(ШаблонСтроки, "%1", Параметр1);
	Результат = СтрЗаменить(Результат, "%2", Параметр2);
	Результат = СтрЗаменить(Результат, "%3", Параметр3);
	Результат = СтрЗаменить(Результат, "%4", Параметр4);
	Результат = СтрЗаменить(Результат, "%5", Параметр5);
	Результат = СтрЗаменить(Результат, "%6", Параметр6);
	
	Возврат Результат;
	
КонецФункции

// Преобразует адрес ящика в идентификатор для Диадок
// 
// Параметры:
//   АдресЯщика - Строка - Адрес ящика в формате "xxx@diadoc.ru" или "xxxx-xxxx-xxxx-xxxx"
// 
// Возвращаемое значение:
//   Строка - Идентификатор ящика в формате GUID
//
Функция АдресЯщикаВИдентификатор(АдресЯщика) Экспорт
	
	АдресЯщикаБезПробелов = СокрЛП(АдресЯщика);
	ИД = СтрЗаменить(АдресЯщикаБезПробелов, "@diadoc.ru", "");
	ДлинаИД = СтрДлина(ИД);
	Результат = "";
	
	Если ДлинаИД = 32 Тогда // 00000000000000000000000000000000
		
		Результат = Сред(ИД, 1, 8) + "-" + Сред(ИД, 9, 4) + "-" + Сред(ИД, 13, 4) + "-" + Сред(ИД, 17, 4) + "-" + Сред(ИД, 21, 12);
		
	ИначеЕсли ДлинаИД = 36 Тогда // 00000000-0000-0000-0000-000000000000
		
		Результат = ИД;
		
	Иначе
		
		ТекстОшибки = ПодставитьПараметрыВСтроку(НСтр("ru = 'Некорректный адрес ящика %1'"), АдресЯщика);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует ссылку на документ в веб-интерфейсе Диадок
//
// Параметры:
//   BoxId - Строка - Идентификатор ящика
//   LetterId - Строка - Идентификатор письма
//   DocumentId - Строка - Идентификатор документа
//   ДляШаблона - Булево - Признак формирования ссылки для шаблона
//
// Возвращаемое значение:
//   Строка - URL документа в Диадок
//
Функция СформироватьСсылкуВБраузере(BoxId, LetterId, DocumentId, ДляШаблона = Ложь) Экспорт
	
	АдресВебСервиса = "diadoc.kontur.ru";
	
	Если ДляШаблона Тогда
		СтрокаШаблона = "https://%1/%2/templates/%3/documents/%4";
	Иначе
		СтрокаШаблона = "https://%1/%2/document/show?letterId=%3&documentId=%4";
	КонецЕсли;
	
	Результат = ПодставитьПараметрыВСтроку(СтрокаШаблона, АдресВебСервиса, BoxId, LetterId, DocumentId);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияИнтерфейса

// Дополняет форму элементами для интеграции с Диадок.
// Процедура должна вызываться из обработчика `ПриСозданииНаСервере` целевой формы.
//
// Ожидается, что в модуле формы будут реализованы клиентские обработчики команд:
//  - ДиадокПолучитьСтатус(Команда)
//  - ДиадокПерейтиВЛичныйКабинет(Команда)
//
// Параметры:
//   Форма - УправляемаяФорма - Форма, которую необходимо дополнить элементами.
//   ИмяТаблицыДокументов - Строка - (опционально) Имя таблицы на форме, для которой нужно сделать команды множественного выбора.
//
&НаСервере
Процедура ДополнитьФормуИнтеграциейДиадок(Форма, ИмяТаблицыДокументов = "") Экспорт
	
	ИмяФормы = Форма.ИмяФормы;
	
	// Определяем тип формы и вызываем соответствующую процедуру
	Если СтрНайти(ИмяФормы, "СписокДокументов") > 0 
		И СтрНайти(ИмяФормы, "ЖурналДокументовЗакупки") > 0 Тогда
		
		// Форма списка документов закупки
		ДополнитьФормуСпискаДокументовДиадок(Форма, ИмяТаблицыДокументов);
		
	ИначеЕсли СтрНайти(ИмяФормы, "ФормаДокумента") > 0 
		И СтрНайти(ИмяФормы, "ПриобретениеТоваровУслуг") > 0 Тогда
		
		// Форма документа ПриобретениеТоваровУслуг
		ДополнитьФормуДокументаДиадок(Форма);
		
	Иначе
		
		// Универсальная обработка для остальных форм (старая логика)
		ДополнитьФормуУниверсально(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеФункции

// Добавляет лидирующие нули к строке
//
// Параметры:
//   ИсходнаяСтрока - Строка - Исходная строка
//   КоличествоНулей - Число - Количество нулей для добавления
//
// Возвращаемое значение:
//   Строка - Строка с добавленными нулями
//
Функция ДобавитьЛидирующиеНули(ИсходнаяСтрока, КоличествоНулей) Экспорт
	
	Если КоличествоНулей > 0 Тогда
		Возврат Формат(0, "ЧЦ=" + КоличествоНулей + "; ЧН=; ЧВН=; ЧГ=") + ИсходнаяСтрока;
	Иначе
		Возврат ИсходнаяСтрока;
	КонецЕсли;
	
КонецФункции

// Преобразует строку из Base64 в двоичное представление
//
// Параметры:
//   СтрокаBase64 - Строка - Строка в формате Base64
//
// Возвращаемое значение:
//   Строка - Двоичное представление (строка из "0" и "1")
//
&НаСервере
Функция Convert_Base64_to_Binary(СтрокаBase64) Экспорт
	
	Результат = "";
	
	ДлинаСтроки = СтрДлина(СтрокаBase64);
	
	Позиция = 1;
	Пока Позиция <= ДлинаСтроки Цикл
		
		СтрокаBinary = КонвертацияBase64().Convert_Base64_to_Binary[Сред(СтрокаBase64, Позиция, 1)];
		
		Если СтрокаBinary <> Неопределено Тогда
			Результат = Результат + СтрокаBinary;
		Иначе
			ВызватьИсключение "Ошибка конвертации Base64 строки """ + СтрокаBase64 + """ в двоичные данные!";
		КонецЕсли;
		
		Позиция = Позиция + 1;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Преобразует двоичное представление в шестнадцатеричное
//
// Параметры:
//   СтрокаBinary - Строка - Двоичное представление (строка из "0" и "1")
//
// Возвращаемое значение:
//   Строка - Шестнадцатеричное представление
//
&НаСервере
Функция Convert_Binary_to_Hex(Знач СтрокаBinary) Экспорт
	
	Результат = "";
	
	СтрокаBinary = ДобавитьЛидирующиеНули(СтрокаBinary, (4 - СтрДлина(СтрокаBinary) % 4) % 4);
	ДлинаСтроки = СтрДлина(СтрокаBinary);
	
	Позиция = 1;
	Пока Позиция < ДлинаСтроки Цикл
		
		СтрокаHex = КонвертацияBase64().Convert_Binary_to_Hex[Сред(СтрокаBinary, Позиция, 4)];
		
		Если СтрокаHex <> Неопределено Тогда
			Результат = Результат + СтрокаHex;
		Иначе
			ВызватьИсключение "Ошибка конвертации двоичных данных в шестнадцатиричные!";
		КонецЕсли;
		
		Позиция = Позиция + 4;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Преобразует шестнадцатеричную строку в GUID
//
// Параметры:
//   СтрокаHex - Строка - Шестнадцатеричная строка
//
// Возвращаемое значение:
//   Строка - GUID в формате xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
//
Функция Convert_Hex_to_GUID(СтрокаHex) Экспорт
	
	Возврат Сред(СтрокаHex, 1, 8) + "-" + Сред(СтрокаHex, 9, 4) + "-" + Сред(СтрокаHex, 13, 4) + "-" 
		+ Сред(СтрокаHex, 17, 4) + "-" + Сред(СтрокаHex, 21, 20) + "-" + Сред(СтрокаHex, 41, 4) + "-" 
		+ Сред(СтрокаHex, 45, 4) + "-" + Сред(СтрокаHex, 49, 4) + "-" + Сред(СтрокаHex, 53, 12);
	
КонецФункции

// Преобразует Base64 строку в GUID
//
// Параметры:
//   Base64 - Строка - Строка в формате Base64
//
// Возвращаемое значение:
//   Строка - GUID
//
Функция Base64_2_GUID(Base64) Экспорт
	
	Число2 = Число2_Из_Base64(Base64);
	Число16 = Число16_Из_Числа2(Число2);
	
	Если СтрДлина(Число16) > 64 Тогда
		Число16 = Прав(Число16, 64);
	КонецЕсли;
	
	Результат = GUID_Из_Числа16(Число16);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Дополняет форму списка документов закупки элементами интеграции с Диадок
//
// Параметры:
//   Форма - УправляемаяФорма - Форма списка документов
//   ИмяТаблицыДокументов - Строка - Имя таблицы на форме
//
Процедура ДополнитьФормуСпискаДокументовДиадок(Форма, ИмяТаблицыДокументов)
	
	// 1. Добавление колонки "СтатусДиадок" в динамический список после "ГруппаОперацияТип"
	ГруппаОперацияТип = Форма.Элементы.Найти("ГруппаОперацияТип");
	
	Если ГруппаОперацияТип <> Неопределено Тогда
		
		// Добавляем поле для отображения статуса из запроса
		ПолеСтатусДиадок = Форма.Элементы.Добавить("СписокДокументыЗакупкиСтатусДиадок", Тип("ПолеФормы"), ГруппаОперацияТип.Родитель);
		ПолеСтатусДиадок.Вид = ВидПоляФормы.ПолеНадписи;
		ПолеСтатусДиадок.ПутьКДанным = "СписокДокументыЗакупки.СтатусЭДО";
		ПолеСтатусДиадок.Заголовок = "Статус Диадок";
		ПолеСтатусДиадок.Ширина = 20;
		
		// Перемещаем поле после группы
		Форма.Элементы.Переместить(ПолеСтатусДиадок, ГруппаОперацияТип.Родитель, ГруппаОперацияТип);
		
	КонецЕсли;
	
	// 2. Создание команд
	КомандаПолучитьСтатус = Форма.Команды.Добавить("ДиадокПолучитьСтатус");
	КомандаПолучитьСтатус.Действие = "ДиадокПолучитьСтатус";
	КомандаПолучитьСтатус.Заголовок = НСтр("ru = 'Получить статус Диадок'");
	КомандаПолучитьСтатус.Картинка = БиблиотекаКартинок.СтатусРаспознаванияДокументаВОбработке;
	
	КомандаПерейтиВЛК = Форма.Команды.Добавить("ДиадокПерейтиВЛичныйКабинет");
	КомандаПерейтиВЛК.Действие = "ДиадокПерейтиВЛичныйКабинет";
	КомандаПерейтиВЛК.Заголовок = НСтр("ru = 'Открыть в Диадок'");
	КомандаПерейтиВЛК.Картинка = БиблиотекаКартинок.ITS_ДиадокОбщаяКартинка;
	
	// 3. Добавление кнопок после группы "ГруппаОрганайзер"
	ГруппаОрганайзер = Форма.Элементы.Найти("ГруппаОрганайзер");
	
	Если ГруппаОрганайзер <> Неопределено Тогда
		
		// Создаем группу для кнопок Диадок
		ГруппаДиадок = Форма.Элементы.Добавить("ГруппаДиадок", Тип("ГруппаФормы"), ГруппаОрганайзер.Родитель);
		ГруппаДиадок.Вид = ВидГруппыФормы.ГруппаКнопок;
		ГруппаДиадок.Заголовок = НСтр("ru = 'Диадок'");
		ГруппаДиадок.Отображение = ОтображениеКнопки.Картинка;
		ГруппаДиадок.Картинка = БиблиотекаКартинок.ITS_ДиадокОбщаяКартинка;
		
		// Добавляем кнопки в группу
		КнопкаПолучитьСтатус = Форма.Элементы.Добавить("КнопкаДиадокПолучитьСтатус", Тип("КнопкаФормы"), ГруппаДиадок);
		КнопкаПолучитьСтатус.ИмяКоманды = "ДиадокПолучитьСтатус";
		КнопкаПолучитьСтатус.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		
		КнопкаПерейти = Форма.Элементы.Добавить("КнопкаДиадокПерейти", Тип("КнопкаФормы"), ГруппаДиадок);
		КнопкаПерейти.ИмяКоманды = "ДиадокПерейтиВЛичныйКабинет";
		КнопкаПерейти.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		
		// Перемещаем группу после ГруппаОрганайзер
		Форма.Элементы.Переместить(ГруппаДиадок, ГруппаОрганайзер.Родитель, ГруппаОрганайзер);
		
	КонецЕсли;
	
КонецПроцедуры

// Дополняет форму документа элементами интеграции с Диадок
//
// Параметры:
//   Форма - УправляемаяФорма - Форма документа
//
Процедура ДополнитьФормуДокументаДиадок(Форма)
	
	// 1. Добавление реквизита для статуса, если его нет
	Если Форма.Элементы.Найти("СтатусДиадок") = Неопределено Тогда
		
		НовыеРеквизиты = Новый Массив;
		НовыеРеквизиты.Добавить(Новый РеквизитФормы("СтатусДиадок", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(250))));
		Форма.ИзменитьРеквизиты(НовыеРеквизиты);
		
	КонецЕсли;
	
	// 2. Создание команд
	КомандаПолучитьСтатус = Форма.Команды.Добавить("ДиадокПолучитьСтатус");
	КомандаПолучитьСтатус.Действие = "ДиадокПолучитьСтатус";
	КомандаПолучитьСтатус.Заголовок = НСтр("ru = 'Обновить статус'");
	КомандаПолучитьСтатус.Картинка = БиблиотекаКартинок.СтатусРаспознаванияДокументаВОбработке;
	
	КомандаПерейтиВЛК = Форма.Команды.Добавить("ДиадокПерейтиВЛичныйКабинет");
	КомандаПерейтиВЛК.Действие = "ДиадокПерейтиВЛичныйКабинет";
	КомандаПерейтиВЛК.Заголовок = НСтр("ru = 'Перейти в Диадок'");
	КомандаПерейтиВЛК.Картинка = БиблиотекаКартинок.ITS_ДиадокОбщаяКартинка;
	
	// 3. Добавление элементов после поля "Комментарий"
	ПолеКомментарий = Форма.Элементы.Найти("Комментарий");
	
	Если ПолеКомментарий <> Неопределено Тогда
		
		// Создаем группу для элементов Диадок
		ГруппаДиадок = Форма.Элементы.Добавить("ГруппаДиадок", Тип("ГруппаФормы"), ПолеКомментарий.Родитель);
		ГруппаДиадок.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаДиадок.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ГруппаДиадок.Заголовок = НСтр("ru = 'Диадок'");
		ГруппаДиадок.ОтображатьЗаголовок = Ложь;
		
		// Добавляем кнопку "Перейти в Диадок"
		КнопкаПерейти = Форма.Элементы.Добавить("КнопкаДиадокПерейти", Тип("КнопкаФормы"), ГруппаДиадок);
		КнопкаПерейти.ИмяКоманды = "ДиадокПерейтиВЛичныйКабинет";
		КнопкаПерейти.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		
		// Добавляем кнопку "Обновить статус"
		КнопкаПолучитьСтатус = Форма.Элементы.Добавить("КнопкаДиадокПолучитьСтатус", Тип("КнопкаФормы"), ГруппаДиадок);
		КнопкаПолучитьСтатус.ИмяКоманды = "ДиадокПолучитьСтатус";
		КнопкаПолучитьСтатус.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		
		// Добавляем поле "Статус документа в Диадок"
		ПолеСтатус = Форма.Элементы.Добавить("ПолеСтатусДиадок", Тип("ПолеФормы"), ГруппаДиадок);
		ПолеСтатус.Вид = ВидПоляФормы.ПолеВвода;
		ПолеСтатус.ПутьКДанным = "СтатусДиадок";
		ПолеСтатус.Заголовок = НСтр("ru = 'Статус документа в Диадок'");
		ПолеСтатус.РежимРедактирования = РежимРедактированияПоляФормы.ТолькоПросмотр;
		ПолеСтатус.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
		ПолеСтатус.АвтоМаксимальнаяШирина = Ложь;
		ПолеСтатус.МаксимальнаяШирина = 60;
		
		// Перемещаем группу после поля Комментарий
		Форма.Элементы.Переместить(ГруппаДиадок, ПолеКомментарий.Родитель, ПолеКомментарий);
		
	КонецЕсли;
	
КонецПроцедуры

// Универсальная процедура дополнения формы элементами интеграции с Диадок
// Используется для форм, не имеющих специальной обработки
//
// Параметры:
//   Форма - УправляемаяФорма - Форма для дополнения
//
Процедура ДополнитьФормуУниверсально(Форма)
	
	// 1. Добавление реквизита для статуса ЭДО, если его нет
	Если Форма.Элементы.Найти("СтатусЭДО") = Неопределено Тогда
		
		НовыеРеквизиты = Новый Массив;
		НовыеРеквизиты.Добавить(Новый РеквизитФормы("СтатусЭДО", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(250))));
		Форма.ИзменитьРеквизиты(НовыеРеквизиты);
		
	КонецЕсли;
	
	// 2. Создание команд
	КомандаПолучитьСтатус = Форма.Команды.Добавить("ДиадокПолучитьСтатус");
	КомандаПолучитьСтатус.Действие = "ДиадокПолучитьСтатус";
	КомандаПолучитьСтатус.Заголовок = НСтр("ru = 'Статус (Диадок)'");
	КомандаПолучитьСтатус.Картинка = БиблиотекаКартинок.СтатусРаспознаванияДокументаВОбработке;
	
	КомандаПерейтиВЛК = Форма.Команды.Добавить("ДиадокПерейтиВЛичныйКабинет");
	КомандаПерейтиВЛК.Действие = "ДиадокПерейтиВЛичныйКабинет";
	КомандаПерейтиВЛК.Заголовок = НСтр("ru = 'Открыть в Диадок'");
	КомандаПерейтиВЛК.Картинка = БиблиотекаКартинок.ITS_ДиадокОбщаяКартинка;
	
	// 3. Создание группы кнопок и самих кнопок
	ГруппаДиадок = Форма.Элементы.Добавить("ГруппаДиадок", Тип("ГруппаФормы"), Форма.КоманднаяПанель);
	ГруппаДиадок.Вид = ВидГруппыФормы.ГруппаКнопок;
	ГруппаДиадок.Заголовок = НСтр("ru = 'Диадок'");
	
	КнопкаПолучитьСтатус = Форма.Элементы.Добавить("КнопкаДиадокПолучитьСтатус", Тип("КнопкаФормы"), ГруппаДиадок);
	КнопкаПолучитьСтатус.ИмяКоманды = "ДиадокПолучитьСтатус";
	КнопкаПолучитьСтатус.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
	
	КнопкаПерейти = Форма.Элементы.Добавить("КнопкаДиадокПерейти", Тип("КнопкаФормы"), ГруппаДиадок);
	КнопкаПерейти.ИмяКоманды = "ДиадокПерейтиВЛичныйКабинет";
	КнопкаПерейти.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		
КонецПроцедуры

// Получает таблицу соответствий для конвертации Base64
//
// Возвращаемое значение:
//   Структура - Таблица соответствий для конвертации
//
&НаСервере
Функция КонвертацияBase64()
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПолучитьОбщийМакет("БиблиотекаТекстов").НаборыДанных.КонвертацияBase64.Запрос);
	КонвертацияBase64 = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
	
	Возврат КонвертацияBase64;
	
КонецФункции

// Преобразует Base64 в двоичное число (строку)
//
// Параметры:
//   Base64 - Строка - Строка в формате Base64
//
// Возвращаемое значение:
//   Строка - Двоичное представление
//
Функция Число2_Из_Base64(Base64)
	
	Результат = "";
	
	Число64 = Формат(Base64, "ЧН=; ЧГ=");
	
	Для ц = 1 По СтрДлина(Число64) Цикл
		
		Символ64 = Сред(Число64, ц, 1);
		
		Если Символ64 = "A" Тогда
			Символ2 = "000000";
		ИначеЕсли Символ64 = "B" Тогда
			Символ2 = "000001";
		ИначеЕсли Символ64 = "C" Тогда
			Символ2 = "000010";
		ИначеЕсли Символ64 = "D" Тогда
			Символ2 = "000011";
		ИначеЕсли Символ64 = "E" Тогда
			Символ2 = "000100";
		ИначеЕсли Символ64 = "F" Тогда
			Символ2 = "000101";
		ИначеЕсли Символ64 = "G" Тогда
			Символ2 = "000110";
		ИначеЕсли Символ64 = "H" Тогда
			Символ2 = "000111";
		ИначеЕсли Символ64 = "I" Тогда
			Символ2 = "001000";
		ИначеЕсли Символ64 = "J" Тогда
			Символ2 = "001001";
		ИначеЕсли Символ64 = "K" Тогда
			Символ2 = "001010";
		ИначеЕсли Символ64 = "L" Тогда
			Символ2 = "001011";
		ИначеЕсли Символ64 = "M" Тогда
			Символ2 = "001100";
		ИначеЕсли Символ64 = "N" Тогда
			Символ2 = "001101";
		ИначеЕсли Символ64 = "O" Тогда
			Символ2 = "001110";
		ИначеЕсли Символ64 = "P" Тогда
			Символ2 = "001111";
		ИначеЕсли Символ64 = "Q" Тогда
			Символ2 = "010000";
		ИначеЕсли Символ64 = "R" Тогда
			Символ2 = "010001";
		ИначеЕсли Символ64 = "S" Тогда
			Символ2 = "010010";
		ИначеЕсли Символ64 = "T" Тогда
			Символ2 = "010011";
		ИначеЕсли Символ64 = "U" Тогда
			Символ2 = "010100";
		ИначеЕсли Символ64 = "V" Тогда
			Символ2 = "010101";
		ИначеЕсли Символ64 = "W" Тогда
			Символ2 = "010110";
		ИначеЕсли Символ64 = "X" Тогда
			Символ2 = "010111";
		ИначеЕсли Символ64 = "Y" Тогда
			Символ2 = "011000";
		ИначеЕсли Символ64 = "Z" Тогда
			Символ2 = "011001";
		ИначеЕсли Символ64 = "a" Тогда
			Символ2 = "011010";
		ИначеЕсли Символ64 = "b" Тогда
			Символ2 = "011011";
		ИначеЕсли Символ64 = "c" Тогда
			Символ2 = "011100";
		ИначеЕсли Символ64 = "d" Тогда
			Символ2 = "011101";
		ИначеЕсли Символ64 = "e" Тогда
			Символ2 = "011110";
		ИначеЕсли Символ64 = "f" Тогда
			Символ2 = "011111";
		ИначеЕсли Символ64 = "g" Тогда
			Символ2 = "100000";
		ИначеЕсли Символ64 = "h" Тогда
			Символ2 = "100001";
		ИначеЕсли Символ64 = "i" Тогда
			Символ2 = "100010";
		ИначеЕсли Символ64 = "j" Тогда
			Символ2 = "100011";
		ИначеЕсли Символ64 = "k" Тогда
			Символ2 = "100100";
		ИначеЕсли Символ64 = "l" Тогда
			Символ2 = "100101";
		ИначеЕсли Символ64 = "m" Тогда
			Символ2 = "100110";
		ИначеЕсли Символ64 = "n" Тогда
			Символ2 = "100111";
		ИначеЕсли Символ64 = "o" Тогда
			Символ2 = "101000";
		ИначеЕсли Символ64 = "p" Тогда
			Символ2 = "101001";
		ИначеЕсли Символ64 = "q" Тогда
			Символ2 = "101010";
		ИначеЕсли Символ64 = "r" Тогда
			Символ2 = "101011";
		ИначеЕсли Символ64 = "s" Тогда
			Символ2 = "101100";
		ИначеЕсли Символ64 = "t" Тогда
			Символ2 = "101101";
		ИначеЕсли Символ64 = "u" Тогда
			Символ2 = "101110";
		ИначеЕсли Символ64 = "v" Тогда
			Символ2 = "101111";
		ИначеЕсли Символ64 = "w" Тогда
			Символ2 = "110000";
		ИначеЕсли Символ64 = "x" Тогда
			Символ2 = "110001";
		ИначеЕсли Символ64 = "y" Тогда
			Символ2 = "110010";
		ИначеЕсли Символ64 = "z" Тогда
			Символ2 = "110011"
		ИначеЕсли Символ64 = "0" Тогда
			Символ2 = "110100";
		ИначеЕсли Символ64 = "1" Тогда
			Символ2 = "110101";
		ИначеЕсли Символ64 = "2" Тогда
			Символ2 = "110110";
		ИначеЕсли Символ64 = "3" Тогда
			Символ2 = "110111";
		ИначеЕсли Символ64 = "4" Тогда
			Символ2 = "111000";
		ИначеЕсли Символ64 = "5" Тогда
			Символ2 = "111001";
		ИначеЕсли Символ64 = "6" Тогда
			Символ2 = "111010";
		ИначеЕсли Символ64 = "7" Тогда
			Символ2 = "111011";
		ИначеЕсли Символ64 = "8" Тогда
			Символ2 = "111100";
		ИначеЕсли Символ64 = "9" Тогда
			Символ2 = "111101";
		ИначеЕсли Символ64 = "+" Тогда
			Символ2 = "111110";
		ИначеЕсли Символ64 = "/" Тогда
			Символ2 = "111111";
		КонецЕсли;
		
		Результат = Результат + Символ2;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Преобразует двоичное число в шестнадцатеричное
//
// Параметры:
//   Число - Строка - Двоичное представление числа
//
// Возвращаемое значение:
//   Строка - Шестнадцатеричное представление
//
Функция Число16_Из_Числа2(Число)
	
	Результат = "";
	
	Число2 = Формат(Число, "ЧН=; ЧВН=; ЧГ=");
	
	ОстатокСимволов = (4 - СтрДлина(Число2) % 4) % 4;
	
	Пока ОстатокСимволов > 0 Цикл
		Число2 = "0" + Число2;
		ОстатокСимволов = ОстатокСимволов - 1;
	КонецЦикла;
	
	// Отрезаем слева куски по 4 бит и делаем число-16
	Пока Число2 <> "" Цикл
		
		Символ2 = Лев(Число2, 4);
		
		Если Символ2 = "0000" Тогда
			Символ16 = "0"
		ИначеЕсли Символ2 = "0001" Тогда
			Символ16 = "1"
		ИначеЕсли Символ2 = "0010" Тогда
			Символ16 = "2"
		ИначеЕсли Символ2 = "0011" Тогда
			Символ16 = "3"
		ИначеЕсли Символ2 = "0100" Тогда
			Символ16 = "4"
		ИначеЕсли Символ2 = "0101" Тогда
			Символ16 = "5"
		ИначеЕсли Символ2 = "0110" Тогда
			Символ16 = "6"
		ИначеЕсли Символ2 = "0111" Тогда
			Символ16 = "7"
		ИначеЕсли Символ2 = "1000" Тогда
			Символ16 = "8"
		ИначеЕсли Символ2 = "1001" Тогда
			Символ16 = "9"
		ИначеЕсли Символ2 = "1010" Тогда
			Символ16 = "a"
		ИначеЕсли Символ2 = "1011" Тогда
			Символ16 = "b"
		ИначеЕсли Символ2 = "1100" Тогда
			Символ16 = "c"
		ИначеЕсли Символ2 = "1101" Тогда
			Символ16 = "d"
		ИначеЕсли Символ2 = "1110" Тогда
			Символ16 = "e"
		ИначеЕсли Символ2 = "1111" Тогда
			Символ16 = "f"
		КонецЕсли;
		
		Результат = Результат + Символ16;
		
		Число2 = Прав(Число2, СтрДлина(Число2) - 4);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Преобразует шестнадцатеричное число в GUID
//
// Параметры:
//   Число16 - Строка - Шестнадцатеричное представление
//
// Возвращаемое значение:
//   Строка - GUID
//
Функция GUID_Из_Числа16(Число16)
	
	Результат = Сред(Число16, 1, 8) + "-" + Сред(Число16, 9, 4) + "-" + Сред(Число16, 13, 4) + "-" 
		+ Сред(Число16, 17, 4) + "-" + Сред(Число16, 21, 20) + "-" + Сред(Число16, 41, 4) + "-" 
		+ Сред(Число16, 45, 4) + "-" + Сред(Число16, 49, 4) + "-" + Сред(Число16, 53, 12);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

