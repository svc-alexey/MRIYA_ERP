#Область Загрузка_Excel
&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	Фильтр = НСтр("ru = 'XLSX'; en = 'XLSX'")
	+ "(*.XLSX)|*.XLSX";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.Заголовок = "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		Файл = ДиалогОткрытияФайла.ПолноеИмяФайла;   
		АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Файл));
		
		ИмяФайлаПриИзмененииНаСервере(АдресВХ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайл(Команда)  
	
	АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Файл));
	ПрочитатьФайлНаСервере(АдресВХ);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлНаСервере(АдресВХ)
	
	ДВД = ПолучитьИзВременногоХранилища(АдресВХ);
	ИмяВрФайла = ПолучитьИмяВременногоФайла("XLSX");
	ДВД.Записать(ИмяВрФайла);
	
	 Данные.Очистить();
	//Вывод в табличный документ

	ТабличныйДокумент = Новый ТабличныйДокумент;

	ТабличныйДокумент.Прочитать(ИмяВрФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);

	//вывод в таблицу значений

	ПЗ = Новый ПостроительЗапроса;

	ПЗ.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабличныйДокумент.Область());

	ПЗ.ДобавлениеПредставлений = ТипДобавленияПредставлений.НеДобавлять;

	ПЗ.ЗаполнитьНастройки();

	ПЗ.Выполнить();
	
	ТаблицаРезультат = ПЗ.Результат.Выгрузить();
    
    // Создаем новую таблицу значений с колонками строкового типа
    ТаблицаЗначений = Новый ТаблицаЗначений;
    Для Каждого Колонка Из ТаблицаРезультат.Колонки Цикл
        ТаблицаЗначений.Колонки.Добавить(Колонка.Имя, Новый ОписаниеТипов("Строка"));
    КонецЦикла;
    
    // Заполняем новую таблицу, преобразуя все значения в строки
    Для Каждого Строка Из ТаблицаРезультат Цикл
        НоваяСтрока = ТаблицаЗначений.Добавить();
        Для Каждого Колонка Из ТаблицаРезультат.Колонки Цикл
            Значение = Строка[Колонка.Имя];
            НоваяСтрока[Колонка.Имя] = Строка(Формат(Значение, "ЧГ=")); // Преобразуем любое значение в строку
        КонецЦикла;
    КонецЦикла;

		
	// Создаем таблицу результата с теми же колонками
    ТаблицаРезультата = Новый ТаблицаЗначений;
	ТаблицаРезультата.Колонки.Добавить("СсылкаНаДокумент", Новый ОписаниеТипов("ДокументСсылка.питРегистрацияЗамен"));
    Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
        ТаблицаРезультата.Колонки.Добавить(Колонка.Имя);
	КонецЦикла;
	
	ТаблицаРезультата.Колонки.Добавить("НайденМатериал", Новый ОписаниеТипов("Булево"));
    ТаблицаРезультата.Колонки.Добавить("НайденаЗамена1", Новый ОписаниеТипов("Булево"));
    ТаблицаРезультата.Колонки.Добавить("НайденаЗамена2", Новый ОписаниеТипов("Булево"));
    ТаблицаРезультата.Колонки.Добавить("НайденаЗамена3", Новый ОписаниеТипов("Булево"));
    ТаблицаРезультата.Колонки.Добавить("НайденаЗамена4", Новый ОписаниеТипов("Булево"));
    ТаблицаРезультата.Колонки.Добавить("НайденаЗамена5", Новый ОписаниеТипов("Булево"));
	
	// Обработка полученной таблицы значений
    Для Каждого СтрокаТЗ Из ТаблицаЗначений Цикл
        
        НоваяСтрокаРезультата = Неопределено;
        
        // Проходим по всем колонкам
        Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
            ЗначениеКолонки = СтрокаТЗ[Колонка.Имя];
            
            Если ЗначениеЗаполнено(ЗначениеКолонки) Тогда
                
				НайденнаяСсылка = Неопределено;
				
                // Сначала ищем по наименованию
                Запрос = Новый Запрос;
                Запрос.Текст = 
                "ВЫБРАТЬ
                |    Номенклатура.Ссылка КАК Ссылка
                |ИЗ
                |    Справочник.Номенклатура КАК Номенклатура
                |ГДЕ
                |    Номенклатура.Наименование = &Наименование
                |    И НЕ Номенклатура.ПометкаУдаления";
                
                Запрос.УстановитьПараметр("Наименование", ЗначениеКолонки);
                Результат = Запрос.Выполнить();
                
				Если НЕ Результат.Пустой() Тогда
					
					Выборка = Результат.Выбрать();
					Выборка.Следующий();
					НайденнаяСсылка = Выборка.Ссылка;
					
				Иначе
					
					// Если не найдено по наименованию, ищем по коду
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|    Номенклатура.Ссылка КАК Ссылка
					|ИЗ
					|    Справочник.Номенклатура КАК Номенклатура
					|ГДЕ
					|    Номенклатура.Код = &Код
					|    И НЕ Номенклатура.ПометкаУдаления";
					
					Запрос.УстановитьПараметр("Код", ЗначениеКолонки);
					Результат = Запрос.Выполнить();
					
					Если НЕ Результат.Пустой() Тогда
						
						Выборка = Результат.Выбрать();
						Выборка.Следующий();
						НайденнаяСсылка = Выборка.Ссылка;
						
					КонецЕсли;
					
				КонецЕсли;
                
                Если НайденнаяСсылка <> Неопределено Тогда
                    // Если номенклатура найдена в любой колонке, создаем строку результата
                    Если НоваяСтрокаРезультата = Неопределено Тогда
                        НоваяСтрокаРезультата = ТаблицаРезультата.Добавить();
						// Инициализируем колонку ссылки на документ
						НоваяСтрокаРезультата.СсылкаНаДокумент = Неопределено;
                        // Сначала копируем все значения как есть
                        Для Каждого Кол Из ТаблицаЗначений.Колонки Цикл
                            НоваяСтрокаРезультата[Кол.Имя] = СтрокаТЗ[Кол.Имя];
                        КонецЦикла;
                        // Инициализируем булевы колонки как Ложь
                        НоваяСтрокаРезультата.НайденМатериал = Ложь;
                        НоваяСтрокаРезультата.НайденаЗамена1 = Ложь;
                        НоваяСтрокаРезультата.НайденаЗамена2 = Ложь;
                        НоваяСтрокаРезультата.НайденаЗамена3 = Ложь;
                        НоваяСтрокаРезультата.НайденаЗамена4 = Ложь;
                        НоваяСтрокаРезультата.НайденаЗамена5 = Ложь;
                    КонецЕсли;
                    
                    // Заменяем значение в той колонке, где нашли, на ссылку
                    НоваяСтрокаРезультата[Колонка.Имя] = НайденнаяСсылка;
                    
                    // Устанавливаем соответствующий флаг в Истина
                    ИндексКолонки = ТаблицаЗначений.Колонки.Индекс(Колонка);
                    Если ИндексКолонки = 0 Тогда
                        НоваяСтрокаРезультата.НайденМатериал = Истина;
                    ИначеЕсли ИндексКолонки = 1 Тогда
                        НоваяСтрокаРезультата.НайденаЗамена1 = Истина;
                    ИначеЕсли ИндексКолонки = 2 Тогда
                        НоваяСтрокаРезультата.НайденаЗамена2 = Истина;
                    ИначеЕсли ИндексКолонки = 3 Тогда
                        НоваяСтрокаРезультата.НайденаЗамена3 = Истина;
                    ИначеЕсли ИндексКолонки = 4 Тогда
                        НоваяСтрокаРезультата.НайденаЗамена4 = Истина;
                    ИначеЕсли ИндексКолонки = 5 Тогда
                        НоваяСтрокаРезультата.НайденаЗамена5 = Истина;
                    КонецЕсли;
                    
                    Сообщить("Найдена номенклатура для: " + ЗначениеКолонки + " в колонке " + Колонка.Имя + " - " + НайденнаяСсылка);
                КонецЕсли;
                
            КонецЕсли;
            
        КонецЦикла;
        
    КонецЦикла;	
	Данные.Загрузить(ТаблицаРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ИмяФайлаПриИзмененииНаСервере(АдресВХ)
	ДВД = ПолучитьИзВременногоХранилища(АдресВХ);
	ИмяВрФайла = ПолучитьИмяВременногоФайла("XLSX");
	ДВД.Записать(ИмяВрФайла);
	
	ТабличныйДокумент.Прочитать(ИмяВрФайла, СпособЧтенияЗначенийТабличногоДокумента.Текст);
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПриИзменении(Элемент)
	
	АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Файл));
	ИмяФайлаПриИзмененииНаСервере(АдресВХ);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьАналогиНаСервере()
	
	// Проверяем заполнение обязательных полей
	Если НЕ ЗначениеЗаполнено(ДатаДействияС) Тогда
		
		Сообщить("Необходимо указать период действия замен (Дата действия С)", СтатусСообщения.Важное);
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаДействияПО) Тогда
		
		Сообщить("Необходимо указать период действия замен (Дата действия ПО)", СтатусСообщения.Важное);
		Возврат;
		
	КонецЕсли;
	
	ТаблицаЗнач = Данные.Выгрузить();
	
	Если ТаблицаЗнач.Количество() = 0 Тогда
		
		Сообщить("Нет данных для создания документов", СтатусСообщения.Внимание);
		Возврат;
		
	КонецЕсли;
	
	КоличествоСозданныхДокументов = 0;
	
	// Проходим по всем строкам таблицы Данные
    Для Каждого СтрокаТаблицы Из ТаблицаЗнач Цикл
        
		// Проверяем, найден ли материал (первая колонка)
		Если НЕ СтрокаТаблицы.НайденМатериал Тогда
			
			Сообщить("Строка пропущена: Материал не найден в справочнике - " + СтрокаТаблицы.Материал, СтатусСообщения.Внимание);
			Продолжить;
			
		КонецЕсли;
		
		// Проверяем, есть ли хотя бы одна найденная замена
		ЕстьЗамены = СтрокаТаблицы.НайденаЗамена1 ИЛИ СтрокаТаблицы.НайденаЗамена2 
			ИЛИ СтрокаТаблицы.НайденаЗамена3 ИЛИ СтрокаТаблицы.НайденаЗамена4 
			ИЛИ СтрокаТаблицы.НайденаЗамена5;
			
		Если НЕ ЕстьЗамены Тогда
			
			Сообщить("Строка пропущена: Не указаны замены для номенклатуры - " + СтрокаТаблицы.Материал, СтатусСообщения.Внимание);
			Продолжить;
			
		КонецЕсли;
		
		// Создаем документ
		СсылкаНаДокумент = СоздатьДокументЗамены(СтрокаТаблицы);
		
		Если СсылкаНаДокумент <> Неопределено Тогда
			
			КоличествоСозданныхДокументов = КоличествоСозданныхДокументов + 1;
			
			// Заполняем колонку СсылкаНаДокумент в исходной таблице
			НайденныеСтроки = Данные.НайтиСтроки(Новый Структура("Материал", СтрокаТаблицы.Материал));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.СсылкаНаДокумент = СсылкаНаДокумент;
			КонецЦикла;
			
		КонецЕсли;
        
    КонецЦикла;
	
	Сообщить("Создано документов: " + КоличествоСозданныхДокументов, СтатусСообщения.Информация);

КонецПроцедуры

&НаСервере
Функция СоздатьДокументЗамены(СтрокаТаблицы)
	
	// Создаем новый документ
	НовыйДокумент = Документы.питРегистрацияЗамен.СоздатьДокумент();
	
	// Заполняем реквизиты шапки
	НовыйДокумент.Дата = ТекущаяДатаСеанса();
	НовыйДокумент.Номенклатура = СтрокаТаблицы.Материал;
	НовыйДокумент.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	НовыйДокумент.ДатаНачалаДействия = ДатаДействияС;
	НовыйДокумент.ДатаОкончанияДействия = ДатаДействияПО;
	НовыйДокумент.Комментарий = "#Создано из EXCEL = " + Формат(ТекущаяДатаСеанса(), "ДЛФ=DT");
	НовыйДокумент.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	
	// Заполняем табличную часть Заменители
	Приоритет = 1;
	
	Если СтрокаТаблицы.НайденаЗамена1 И ЗначениеЗаполнено(СтрокаТаблицы.Замена1) Тогда
		
		НоваяСтрока = НовыйДокумент.Заменители.Добавить();
		НоваяСтрока.Номенклатура = СтрокаТаблицы.Замена1;
		НоваяСтрока.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		НоваяСтрока.Коэффициент = 1;
		НоваяСтрока.Приоритет = Приоритет;
		НоваяСтрока.Обратимость = Истина;
		НоваяСтрока.ИсточникОбратимости = Документы.питРегистрацияЗамен.ПустаяСсылка();
		Приоритет = Приоритет + 1;
		
	КонецЕсли;
	
	Если СтрокаТаблицы.НайденаЗамена2 И ЗначениеЗаполнено(СтрокаТаблицы.Замена2) Тогда
		
		НоваяСтрока = НовыйДокумент.Заменители.Добавить();
		НоваяСтрока.Номенклатура = СтрокаТаблицы.Замена2;
		НоваяСтрока.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		НоваяСтрока.Коэффициент = 1;
		НоваяСтрока.Приоритет = Приоритет;
		НоваяСтрока.Обратимость = Истина;
		НоваяСтрока.ИсточникОбратимости = Документы.питРегистрацияЗамен.ПустаяСсылка();
		Приоритет = Приоритет + 1;
		
	КонецЕсли;
	
	Если СтрокаТаблицы.НайденаЗамена3 И ЗначениеЗаполнено(СтрокаТаблицы.Замена3) Тогда
		
		НоваяСтрока = НовыйДокумент.Заменители.Добавить();
		НоваяСтрока.Номенклатура = СтрокаТаблицы.Замена3;
		НоваяСтрока.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		НоваяСтрока.Коэффициент = 1;
		НоваяСтрока.Приоритет = Приоритет;
		НоваяСтрока.Обратимость = Истина;
		НоваяСтрока.ИсточникОбратимости = Документы.питРегистрацияЗамен.ПустаяСсылка();
		Приоритет = Приоритет + 1;
		
	КонецЕсли;
	
	Если СтрокаТаблицы.НайденаЗамена4 И ЗначениеЗаполнено(СтрокаТаблицы.Замена4) Тогда
		
		НоваяСтрока = НовыйДокумент.Заменители.Добавить();
		НоваяСтрока.Номенклатура = СтрокаТаблицы.Замена4;
		НоваяСтрока.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		НоваяСтрока.Коэффициент = 1;
		НоваяСтрока.Приоритет = Приоритет;
		НоваяСтрока.Обратимость = Истина;
		НоваяСтрока.ИсточникОбратимости = Документы.питРегистрацияЗамен.ПустаяСсылка();
		Приоритет = Приоритет + 1;
		
	КонецЕсли;
	
	Если СтрокаТаблицы.НайденаЗамена5 И ЗначениеЗаполнено(СтрокаТаблицы.Замена5) Тогда
		
		НоваяСтрока = НовыйДокумент.Заменители.Добавить();
		НоваяСтрока.Номенклатура = СтрокаТаблицы.Замена5;
		НоваяСтрока.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		НоваяСтрока.Коэффициент = 1;
		НоваяСтрока.Приоритет = Приоритет;
		НоваяСтрока.Обратимость = Истина;
		НоваяСтрока.ИсточникОбратимости = Документы.питРегистрацияЗамен.ПустаяСсылка();
		Приоритет = Приоритет + 1;
		
	КонецЕсли;
	
	// Заполняем табличную часть Подразделения
	Если Подразделения.Количество() > 0 Тогда
		
		Для Каждого СтрокаПодразделения Из Подразделения Цикл
			
			НоваяСтрока = НовыйДокумент.Подразделения.Добавить();
			НоваяСтрока.Подразделение = СтрокаПодразделения.Подразделение;
			НоваяСтрока.ВключаяПодчиненные = СтрокаПодразделения.ВключаяПодчиненные;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Записываем документ
	Попытка
		
		НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		Возврат НовыйДокумент.Ссылка;
		
	Исключение
		
		Сообщить("Ошибка создания документа: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура СоздатьНоменклатуру(Команда)
	СоздатьАналогиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьПодразделения(Команда)
	
	// Открываем форму выбора подразделений
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	
	ОткрытьФорму("Справочник.СтруктураПредприятия.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, , , , 
		Новый ОписаниеОповещения("ПодобратьПодразделенияЗавершение", ЭтотОбъект), 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьПодразделенияЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		Если ТипЗнч(РезультатВыбора) = Тип("Массив") Тогда
			
			Для Каждого ВыбранныйЭлемент Из РезультатВыбора Цикл
				
				// Проверяем, нет ли уже такого подразделения в таблице
				НайденныеСтроки = Подразделения.НайтиСтроки(Новый Структура("Подразделение", ВыбранныйЭлемент));
				Если НайденныеСтроки.Количество() = 0 Тогда
					
					НоваяСтрока = Подразделения.Добавить();
					НоваяСтрока.Подразделение = ВыбранныйЭлемент;
					НоваяСтрока.ВключаяПодчиненные = Ложь;
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			// Проверяем, нет ли уже такого подразделения в таблице
			НайденныеСтроки = Подразделения.НайтиСтроки(Новый Структура("Подразделение", РезультатВыбора));
			Если НайденныеСтроки.Количество() = 0 Тогда
				
				НоваяСтрока = Подразделения.Добавить();
				НоваяСтрока.Подразделение = РезультатВыбора;
				НоваяСтрока.ВключаяПодчиненные = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


