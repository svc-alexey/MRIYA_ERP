
&НаКлиенте
Процедура ITS_ДиадокПерейтиВДиадокПосле(Команда)
	Ссылка = Элементы.СписокДокументыЗакупки.ТекущиеДанные.Ссылка;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Ссылка", Ссылка);
	
	
	Если НЕ ЗначениеЗаполнено(ЛогинДиадок()) ИЛИ НЕ ЗначениеЗаполнено(ПарольДиадок()) Тогда
		ОткрытьФорму("ОбщаяФорма.ФормаЗапросаДанныхДиадока",
		,,,,,Новый ОписаниеОповещения("ПерейтиВДиадокОповещение", ЭтотОбъект, ДополнительныеПараметры));
	Иначе
		ПерейтиВДиадокЗавершение(Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВДиадокОповещение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		УстановитьЗначениеПараметраСеанса("ЛогинДиадок", ВыбранноеЗначение.Логин);
		УстановитьЗначениеПараметраСеанса("ПарольДиадок", ВыбранноеЗначение.Пароль);
		УстановитьЗначениеПараметраСеанса("КлючРазработчикаДиадок", ВыбранноеЗначение.КлючРазработчикаДиадок); 
	КонецЕсли;
	
	Ссылка = ДополнительныеПараметры.Ссылка;
	ПерейтиВДиадокЗавершение(Ссылка)
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВДиадокЗавершение(Документ) 
	ГиперссылкаНаДокумент = ПолучитьСсылкуДиадок(ЛогинДиадок(),ПарольДиадок(),КлючРазработчикаДиадок(),Документ); 
	Если ЗначениеЗаполнено(ГиперссылкаНаДокумент) Тогда
		ЗапуститьПриложение(ГиперссылкаНаДокумент); 
	Иначе
		Сообщить("Не удалось получить гиперссылку документа!");
	КонецЕсли;
	
КонецПроцедуры

Функция ЛогинДиадок()    
	Попытка
		Возврат ПараметрыСеанса.ЛогинДиадок; 
	Исключение
		Возврат "";
	КонецПопытки;
КонецФункции    

Функция ПарольДиадок()   
	Попытка
	Возврат ПараметрыСеанса.ПарольДиадок;   
Исключение
	Возврат "";
	КонецПопытки;
КонецФункции

Функция КлючРазработчикаДиадок() 
	Попытка
	Возврат ПараметрыСеанса.КлючРазработчикаДиадок;     
Исключение 
	Возврат "";
	КонецПопытки;
КонецФункции

Процедура УстановитьЗначениеПараметраСеанса(Знач ИмяПараметра, Значение) 	
	ПараметрыСеанса[ИмяПараметра] =  Значение;
КонецПроцедуры      

  //&НаСервере
 Функция Документы_СсылкаВБраузере(Документ) Экспорт
    
    BoxId        = Документ.Идентификаторы.BoxId;
    LetterId    = Документ.Идентификаторы.LetterId;
    DocumentId    = Документ.Идентификаторы.DocumentId;
    ДляШаблона    = Документ.Шаблон;
    
    Результат = СформироватьСсылкуВБраузере(BoxId, LetterId, DocumentId, ДляШаблона);
    
    Возврат Результат;
    
КонецФункции   
 // Преобразует идентификатор в адрес ящика в Диадоке
// 
// Параметры:
//  ИД - Строка - идентификатор ящика.
// 
// Возвращаемое значение:
//   Строка - адрес ящика.
//
Функция АдресЯщикаВИдентификатор(АдресЯщика) Экспорт
	
	АдресЯщикаБезПробелов = СокрЛП(АдресЯщика);
	ИД = СтрЗаменить(АдресЯщикаБезПробелов, "@diadoc.ru", "");
	ДлинаИД = СтрДлина(ИД);
	Результат = "";
	
	Если ДлинаИД = 32 Тогда // 00000000000000000000000000000000
		
		Результат = Сред(ИД, 1, 8)
			+ "-" + Сред(ИД, 9, 4)
			+ "-" + Сред(ИД, 13, 4)
			+ "-" + Сред(ИД, 17, 4)
			+ "-" + Сред(ИД, 21, 12);
		
	ИначеЕсли ДлинаИД = 36 Тогда // 00000000-0000-0000-0000-000000000000
		
		Результат = ИД;
		
	Иначе
		
		ТекстОшибки = Общее_ПодставитьПараметрыВСтроку(НСтр(
					"ru = 'Некорректный адрес ящика %1'"), АдресЯщика);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
   Функция СформироватьСсылкуВБраузере(BoxId, LetterId, DocumentId, ДляШаблона = Ложь) Экспорт
    
    АдресВебСервиса = "diadoc.kontur.ru";
    
    Если ДляШаблона Тогда
        СтрокаШаблона = "https://%1/%2/templates/%3/documents/%4";
    Иначе
        СтрокаШаблона = "https://%1/%2/document/show?letterId=%3&documentId=%4";
    КонецЕсли;
    
    Результат = Общее_ПодставитьПараметрыВСтроку(СтрокаШаблона, АдресВебСервиса, BoxId, LetterId, DocumentId);
    
    Возврат Результат;
    
КонецФункции


Функция Общее_ПодставитьПараметрыВСтроку(ШаблонСтроки, Параметр1
    , Параметр2 = Неопределено
    , Параметр3 = Неопределено
    , Параметр4 = Неопределено
    , Параметр5 = Неопределено
    , Параметр6 = Неопределено) Экспорт
    
    Результат = СтрЗаменить(ШаблонСтроки, "%1", Параметр1);
    Результат = СтрЗаменить(Результат    , "%2", Параметр2);
    Результат = СтрЗаменить(Результат    , "%3", Параметр3);
    Результат = СтрЗаменить(Результат    , "%4", Параметр4);
    Результат = СтрЗаменить(Результат    , "%5", Параметр5);
    Результат = СтрЗаменить(Результат    , "%6", Параметр6);
    
    Возврат Результат;
    
КонецФункции

Функция ПолучитьСтруктуруДокументаПоAPIДиадок(ЛогинНаСайтДиадок,ПарольНаСайтДиадок,ddauth_api_client,Документ) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат "";	
	КонецЕсли;
	ТекстТЗ = "";
	
	Попытка
		АдресРесурса = "/Authenticate?login="+ЛогинНаСайтДиадок+"&password="+ПарольНаСайтДиадок;
		АдресСайта = "diadoc-api.kontur.ru";
		HTTPЗапрос2 = Новый HTTPЗапрос;
		HTTPЗапрос2.Заголовки.Вставить("POST "+АдресРесурса+" HTTP/1.1");
		HTTPЗапрос2.Заголовки.Вставить("Host", "diadoc-api.kontur.ru");
		HTTPЗапрос2.Заголовки.Вставить("Content-Length", 0);
		HTTPЗапрос2.Заголовки.Вставить("Authorization", "DiadocAuth ddauth_api_client_id="+ddauth_api_client);
		HTTPЗапрос2.АдресРесурса = АдресРесурса;	
		Соединение1 = Новый HTTPСоединение(АдресСайта,,,, , ,Новый ЗащищенноеСоединениеOpenSSL(),Ложь); 
		ФайлРезультата = ПолучитьИмяВременногоФайла();
		Соединение1.ОтправитьДляОбработки(HTTPЗапрос2,ФайлРезультата);
		Ответ = Новый ТекстовыйДокумент();
		Ответ.Прочитать(ФайлРезультата, КодировкаТекста.UTF8);
		ПолеДокумента1 = Ответ.ПолучитьТекст();
	
		boxId = Документ_2_DocumentboxId(Документ);
		Гуид = Документ_2_DocumentID(Документ);
		messageId = Лев(Гуид,36);
		entityId = СтрЗаменить(Гуид,messageId,"");         
		
		
		
		АдресСайта = "diadoc-api.kontur.ru/V3/GetDocument?boxId="+boxId+"&messageId="+messageId+"&entityId="+entityId;
		HTTPЗапрос2 = Новый HTTPЗапрос;
		HTTPЗапрос2.Заголовки.Вставить("GET /V3/GetDocument  HTTP/1.1");
		HTTPЗапрос2.Заголовки.Вставить("Host", "diadoc-api.kontur.ru");
		HTTPЗапрос2.Заголовки.Вставить("Accept",		"application/json");  // без этого вернется протобуфер
		HTTPЗапрос2.Заголовки.Вставить("Content-Type",	"application/json; charset=utf-8");  // для отправки в JSON вместо protobuf
		HTTPЗапрос2.Заголовки.Вставить("Authorization", "DiadocAuth ddauth_api_client_id="+ddauth_api_client+",ddauth_token="+ПолеДокумента1);
		Соединение1 = Новый HTTPСоединение(АдресСайта,,,, , ,Новый ЗащищенноеСоединениеOpenSSL(),Ложь); 	
		ОтветHTTP = Соединение1.Получить(HTTPЗапрос2);
		ТекстТЗ =  ОтветHTTP.ПолучитьТелоКакСтроку(); 
		
		
	Исключение	
		Сообщить(ОписаниеОшибки());
		Возврат "";	
	КонецПопытки;
	
	Если Не ЗначениеЗаполнено(ТекстТЗ) Тогда
		Возврат "";	
	КонецЕсли;

	Попытка     
		Статусы =  Перечисление_СтатусыДокументовАПИ();
		
		СтруктураJson1 = мПрочитатьJSON(ТекстТЗ);   
		Попытка
		Статус_ = статусы.Получить(СтруктураJson1.RecipientReceiptMetadata.ReceiptStatus);
	Исключение  
		Статус_ = "";
	КонецПопытки;  
	Если Статус_ = Неопределено Тогда  
		Статус_ = "";
	КонецЕсли;
	
		
		Попытка
			Статус = СтруктураJson1.DocflowStatus.PrimaryStatus.StatusText;  
		Исключение   
			Статус = "";
		КонецПопытки;  
		Возврат Статус_ + ?(ЗначениеЗаполнено(Статус_),", ","") + Статус;
		//Если СтруктураJson1.Свойство("UniversalTransferDocumentMetadata") Тогда
		//	Возврат СтруктураJson1;
		//Иначе
		//	Возврат "";	
		//КонецЕсли;
	Исключение   
		Возврат ТекстТЗ;
	КонецПопытки;

КонецФункции


Функция ПолучитьСсылкуДиадок(ЛогинНаСайтДиадок,ПарольНаСайтДиадок,ddauth_api_client,Документ) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат "";	
	КонецЕсли;	
	
	Попытка
		АдресРесурса = "/Authenticate?login="+ЛогинНаСайтДиадок+"&password="+ПарольНаСайтДиадок;
		АдресСайта = "diadoc-api.kontur.ru";
		HTTPЗапрос2 = Новый HTTPЗапрос;
		HTTPЗапрос2.Заголовки.Вставить("POST "+АдресРесурса+" HTTP/1.1");
		HTTPЗапрос2.Заголовки.Вставить("Host", "diadoc-api.kontur.ru");
		HTTPЗапрос2.Заголовки.Вставить("Content-Length", 0);
		HTTPЗапрос2.Заголовки.Вставить("Authorization", "DiadocAuth ddauth_api_client_id="+ddauth_api_client);
		HTTPЗапрос2.АдресРесурса = АдресРесурса;	
		Соединение1 = Новый HTTPСоединение(АдресСайта,,,, , ,Новый ЗащищенноеСоединениеOpenSSL(),Ложь); 
		ФайлРезультата = ПолучитьИмяВременногоФайла();
		Соединение1.ОтправитьДляОбработки(HTTPЗапрос2,ФайлРезультата);
		Ответ = Новый ТекстовыйДокумент();
		Ответ.Прочитать(ФайлРезультата, КодировкаТекста.UTF8);
		ПолеДокумента1 = Ответ.ПолучитьТекст();
	
		boxId = Документ_2_DocumentboxId(Документ);
		Гуид = Документ_2_DocumentID(Документ);
		messageId = Лев(Гуид,36);
		entityId = СтрЗаменить(Гуид,messageId,"");         
		
		//https://diadoc.kontur.ru/47b164d8-ae6e-4bfe-98db-8cf174c5b578/Document/Show?letterId=e3ecf925-96fe-4a01-8236-db65e6ce6ba1&documentId=247571c1-543d-474e-9769-9eb2200f417b		
		GUID = Base64_2_GUID(Гуид);  
		Гуид_ДляСсылки = Документ_2_DocumentID_ДляСсылки(Документ); 
		
		Результат = Новый Структура;
		Результат.Вставить("LetterID",        Лев(Гуид_ДляСсылки, 36));
		Результат.Вставить("DocumentID",    Прав(Гуид_ДляСсылки, 36));    
		Возврат СформироватьСсылкуВБраузере(АдресЯщикаВИдентификатор(boxId),Результат.LetterID,Результат.DocumentID);
	
	Исключение 
		Сообщить(ОписаниеОшибки());
		Возврат "";
	КонецПопытки;
	
КонецФункции


 
Функция Число2_Из_Base64(Base64)
	
	Результат = "";
	
	Число64 = Формат(Base64,"ЧН=;  ЧГ=");
	
	Для ц = 1 по СтрДлина(Число64) Цикл 
		
		Символ64 = Сред(Число64, ц, 1);
		
		Если Символ64 = "A" Тогда 
			Символ2 = "000000";
		ИначеЕсли Символ64 = "B" Тогда 
			Символ2 = "000001";
		ИначеЕсли Символ64 = "C" Тогда 
			Символ2 = "000010";
		ИначеЕсли Символ64 = "D" Тогда 
			Символ2 = "000011";
		ИначеЕсли Символ64 = "E" Тогда 
			Символ2 = "000100";
		ИначеЕсли Символ64 = "F" Тогда 
			Символ2 = "000101";
		ИначеЕсли Символ64 = "G" Тогда 
			Символ2 = "000110";
		ИначеЕсли Символ64 = "H" Тогда 
			Символ2 = "000111";
		ИначеЕсли Символ64 = "I" Тогда 
			Символ2 = "001000";
		ИначеЕсли Символ64 = "J" Тогда 
			Символ2 = "001001";
		ИначеЕсли Символ64 = "K" Тогда 
			Символ2 = "001010";
		ИначеЕсли Символ64 = "L" Тогда 
			Символ2 = "001011";
		ИначеЕсли Символ64 = "M" Тогда 
			Символ2 = "001100";
		ИначеЕсли Символ64 = "N" Тогда 
			Символ2 = "001101";
		ИначеЕсли Символ64 = "O" Тогда 
			Символ2 = "001110";
		ИначеЕсли Символ64 = "P" Тогда 
			Символ2 = "001111";
		ИначеЕсли Символ64 = "Q" Тогда 
			Символ2 = "010000";
		ИначеЕсли Символ64 = "R" Тогда 
			Символ2 = "010001";
		ИначеЕсли Символ64 = "S" Тогда 
			Символ2 = "010010";
		ИначеЕсли Символ64 = "T" Тогда 
			Символ2 = "010011";
		ИначеЕсли Символ64 = "U" Тогда 
			Символ2 = "010100";
		ИначеЕсли Символ64 = "V" Тогда 
			Символ2 = "010101";
		ИначеЕсли Символ64 = "W" Тогда 
			Символ2 = "010110";
		ИначеЕсли Символ64 = "X" Тогда 
			Символ2 = "010111";
		ИначеЕсли Символ64 = "Y" Тогда 
			Символ2 = "011000";
		ИначеЕсли Символ64 = "Z" Тогда 
			Символ2 = "011001";
		ИначеЕсли Символ64 = "a" Тогда 
			Символ2 = "011010";
		ИначеЕсли Символ64 = "b" Тогда 
			Символ2 = "011011";
		ИначеЕсли Символ64 = "c" Тогда 
			Символ2 = "011100";
		ИначеЕсли Символ64 = "d" Тогда 
			Символ2 = "011101";
		ИначеЕсли Символ64 = "e" Тогда 
			Символ2 = "011110";
		ИначеЕсли Символ64 = "f" Тогда 
			Символ2 = "011111";
		ИначеЕсли Символ64 = "g" Тогда 
			Символ2 = "100000";
		ИначеЕсли Символ64 = "h" Тогда 
			Символ2 = "100001";
		ИначеЕсли Символ64 = "i" Тогда 
			Символ2 = "100010";
		ИначеЕсли Символ64 = "j" Тогда 
			Символ2 = "100011";
		ИначеЕсли Символ64 = "k" Тогда 
			Символ2 = "100100";
		ИначеЕсли Символ64 = "l" Тогда 
			Символ2 = "100101";
		ИначеЕсли Символ64 = "m" Тогда 
			Символ2 = "100110";
		ИначеЕсли Символ64 = "n" Тогда 
			Символ2 = "100111";
		ИначеЕсли Символ64 = "o" Тогда 
			Символ2 = "101000";
		ИначеЕсли Символ64 = "p" Тогда 
			Символ2 = "101001";
		ИначеЕсли Символ64 = "q" Тогда 
			Символ2 = "101010";
		ИначеЕсли Символ64 = "r" Тогда 
			Символ2 = "101011";
		ИначеЕсли Символ64 = "s" Тогда 
			Символ2 = "101100";
		ИначеЕсли Символ64 = "t" Тогда 
			Символ2 = "101101";
		ИначеЕсли Символ64 = "u" Тогда 
			Символ2 = "101110";
		ИначеЕсли Символ64 = "v" Тогда 
			Символ2 = "101111";
		ИначеЕсли Символ64 = "w" Тогда 
			Символ2 = "110000";
		ИначеЕсли Символ64 = "x" Тогда 
			Символ2 = "110001";
		ИначеЕсли Символ64 = "y" Тогда 
			Символ2 = "110010";
		ИначеЕсли Символ64 = "z" Тогда 
			Символ2 = "110011"
			
		ИначеЕсли Символ64 = "0" Тогда 
			Символ2 = "110100";
		ИначеЕсли Символ64 = "1" Тогда 
			Символ2 = "110101";
		ИначеЕсли Символ64 = "2" Тогда 
			Символ2 = "110110";
		ИначеЕсли Символ64 = "3" Тогда 
			Символ2 = "110111";
		ИначеЕсли Символ64 = "4" Тогда 
			Символ2 = "111000";
		ИначеЕсли Символ64 = "5" Тогда 
			Символ2 = "111001";
		ИначеЕсли Символ64 = "6" Тогда 
			Символ2 = "111010";
		ИначеЕсли Символ64 = "7" Тогда 
			Символ2 = "111011";
		ИначеЕсли Символ64 = "8" Тогда 
			Символ2 = "111100";
		ИначеЕсли Символ64 = "9" Тогда 
			Символ2 = "111101";
		ИначеЕсли Символ64 = "+" Тогда 
			Символ2 = "111110";
		ИначеЕсли Символ64 = "/" Тогда 
			Символ2 = "111111";
		КонецЕсли; 
		
		Результат = Результат + Символ2;
		
	КонецЦикла;
	
	Возврат Результат;
		
КонецФункции	

Функция Число16_Из_Числа2(Число)
	
	Результат = "";

	Число2 = Формат(Число,"ЧН=; ЧВН=; ЧГ=");
	
	ОстатокСимволов = (4 - СтрДлина(Число2) % 4) % 4;
	
	Пока ОстатокСимволов > 0 Цикл 
		Число2			= "0" + Число2;
		ОстатокСимволов	= ОстатокСимволов - 1; 
	КонецЦикла;
	
	//отрезаем слева куски по 4 бит и делаем число-16
	Пока Число2 <> "" цикл 
		
		Символ2 = Лев(Число2, 4);
		
		Если Символ2 = "0000" Тогда 
			Символ16 = "0"
		ИначеЕсли Символ2 = "0001" Тогда 
			Символ16  = "1"
		ИначеЕсли Символ2 = "0010" Тогда 
			Символ16  = "2"
		ИначеЕсли Символ2 = "0011" Тогда 
			Символ16  = "3"
		ИначеЕсли Символ2 = "0100" Тогда 
			Символ16  = "4"
		ИначеЕсли Символ2 = "0101" Тогда 
			Символ16  = "5"
		ИначеЕсли Символ2 = "0110" Тогда 
			Символ16  = "6"
		ИначеЕсли Символ2 = "0111" Тогда 
			Символ16  = "7"
		ИначеЕсли Символ2 = "1000" Тогда 
			Символ16  = "8"
		ИначеЕсли Символ2 = "1001" Тогда 
			Символ16  = "9"
		ИначеЕсли Символ2 = "1010" Тогда 
			Символ16  = "a"
		ИначеЕсли Символ2 = "1011" Тогда 
			Символ16  = "b"
		ИначеЕсли Символ2 = "1100" Тогда 
			Символ16  = "c"
		ИначеЕсли Символ2 = "1101" Тогда 
			Символ16  = "d"
		ИначеЕсли Символ2 = "1110" Тогда 
			Символ16  = "e"
		ИначеЕсли Символ2 = "1111" Тогда 
			Символ16  = "f"
		КонецЕсли;
		
		Результат = Результат + Символ16;
		
		Число2 = Прав(Число2, СтрДлина(Число2) - 4);	
		
	КонецЦикла;
	
	Возврат Результат;
		
КонецФункции 	
	
Функция GUID_Из_Числа16(Число16)
	
	Результат = Сред(Число16, 1, 8) + "-"
	+ Сред(Число16, 9, 4) + "-"
	+ Сред(Число16, 13, 4) + "-"
	+ Сред(число16, 17, 4) + "-"
	+ Сред(число16, 21, 20) + "-"
	+ Сред(число16, 41, 4) + "-"
	+ Сред(число16, 45, 4) + "-"
	+ Сред(число16, 49, 4) + "-"
	+ Сред(число16, 53, 12);
	
	Возврат Результат
	
КонецФункции


  Функция Base64_2_GUID(Base64)
    
    Число2    = Число2_Из_Base64(Base64);
    Число16 = Число16_Из_Числа2(Число2);
    
    Если СтрДлина(Число16) > 64 Тогда
        Число16 = Прав(Число16, 64);
    КонецЕсли;
    
    Результат = GUID_Из_Числа16(Число16);
    
    Возврат Результат;
        
КонецФункции
 
Функция Перечисление_СтатусыДокументовАПИ()
	
		
		Результат = Новый Соответствие;
		
		Результат.Вставить("Аннулирован", 									"RevocationAccepted");
		Результат.Вставить("Документооборот завершен", 						"Finished");
		Результат.Вставить("Ожидается аннулирование", 						"RevocationIsRequestedByMe");
		Результат.Вставить("Ошибка подписи",								"InvalidSenderSignature");
		Результат.Вставить("Ошибка доставки документа через роуминг", 		"RoamingNotificationError");
		Результат.Вставить("Подписан контрагентом", 						"WithRecipientSignature");
		Результат.Вставить("Требуется аннулирование",						"RequestsMyRevocation");
		Результат.Вставить("Требуется подписать извещение",					"HaveToCreateReceipt");
		Результат.Вставить("Требуется уточнение",							"InvoiceAmendmentRequested");
		Результат.Вставить("Ожидается уточнение",							"InvoiceAmendmentRequested");
		Результат.Вставить("Отказано в подписи контрагенту",				"RecipientSignatureRequestRejected");
		Результат.Вставить("Подписан",										"WithRecipientSignature");
		Результат.Вставить("Требуется подпись",								"WaitingForRecipientSignature");
		Результат.Вставить("Контрагент отказал в подписи",					"RecipientSignatureRequestRejected");
		Результат.Вставить("Ожидается извещение о получении",				"WaitingForReceipt");
		Результат.Вставить("Ожидается подпись контрагента",					"WaitingForRecipientSignature");
		Результат.Вставить("Ожидается промежуточная подпись",				"WaitingForProxySignature");
		Результат.Вставить("Отказано в промежуточной подписи",				"ProxySignatureRejected");
		
			
	Возврат Результат;
	
КонецФункции

Функция мПрочитатьJSON(ТекстОтвета)

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстОтвета);
	Объект1с = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	Возврат Объект1с;
	
КонецФункции

Функция Документ_2_DocumentID(Документ) Экспорт 
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения
	|ГДЕ
	|	Свойство = &ИдентификаторДокументаВДиадок
	|	И Объект = &Объект И НЕ Значение ПОДОБНО ""усл:%""");
	
	Запрос.УстановитьПараметр("Объект", Документ);
	Запрос.УстановитьПараметр("ИдентификаторДокументаВДиадок", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("ИдентификаторДокументаВДиадок"));
	
	РезультатЗапроса= Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка= РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Если ЗначениеЗаполнено(Выборка.Значение) Тогда
			Возврат КонвертироватьЧисло64вГуид(Выборка.Значение); 
			//Base64_2_GUID(Выборка.Значение)
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

 Функция Документ_2_DocumentID_ДляСсылки(Документ) Экспорт 
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения
	|ГДЕ
	|	Свойство = &ИдентификаторДокументаВДиадок
	|	И Объект = &Объект И НЕ Значение ПОДОБНО ""усл:%""");
	
	Запрос.УстановитьПараметр("Объект", Документ);
	Запрос.УстановитьПараметр("ИдентификаторДокументаВДиадок", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("ИдентификаторДокументаВДиадок"));
	
	РезультатЗапроса= Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка= РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Если ЗначениеЗаполнено(Выборка.Значение) Тогда
			Возврат Base64_2_GUID(Выборка.Значение); 
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция Документ_2_DocumentboxId(Документ) Экспорт 
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения
	|ГДЕ
	|	Свойство = &ИдентификаторДокументаВДиадок
	|	И Объект = &Объект И НЕ Значение ПОДОБНО ""усл:%""");
	
	Запрос.УстановитьПараметр("Объект", Документ);
	Запрос.УстановитьПараметр("ИдентификаторДокументаВДиадок", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("ИдентификаторЯщикДокументаВДиадок"));
	
	РезультатЗапроса= Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка= РезультатЗапроса.Выбрать();
		Выборка.Следующий();	
		Если ЗначениеЗаполнено(Выборка.Значение) Тогда
			Возврат Выборка.Значение;
		КонецЕсли;	
	КонецЕсли;
	
КонецФункции

Функция КонвертироватьЧисло64вГуид(СтрокаBase64)  
	
	СтрокаHex= Прав(Convert_Binary_to_Hex(Convert_Base64_to_Binary(СтрокаBase64)), 64);
	
	Возврат Convert_Hex_to_GUID(СтрокаHex);
	
КонецФункции


Функция ДобавитьЛидирующиеНули(ИсходнаяСтрока, КоличествоНулей)
	
	Если КоличествоНулей > 0 Тогда
		Возврат Формат(0, "ЧЦ="+КоличествоНулей+"; ЧН=; ЧВН=; ЧГ=") + ИсходнаяСтрока;
	Иначе
		Возврат ИсходнаяСтрока;
	КонецЕсли;
	
КонецФункции


Функция КонвертацияBase64() 
	
	ЧтениеXML= Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПолучитьОбщийМакет("БиблиотекаТекстов").НаборыДанных.КонвертацияBase64.Запрос);
	КонвертацияBase64= СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
	
	Возврат КонвертацияBase64;
	
КонецФункции


Функция Convert_Hex_to_Base64(Знач СтрокаHex)
	
	Результат= "";
	
	СтрокаHex= ДобавитьЛидирующиеНули(СтрокаHex, (3-СтрДлина(СтрокаHex)%3)%3);
	ДлинаСтроки= СтрДлина(СтрокаHex);
	
	Позиция= 1;
	Пока Позиция < ДлинаСтроки Цикл
		
		СтрокаBase64= КонвертацияBase64().Convert_Hex_to_Base64[Сред(СтрокаHex, Позиция, 3)];
		
		Если СтрокаBase64 <> Неопределено Тогда
			Результат= Результат + СтрокаBase64;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
		Позиция= Позиция + 3;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция Convert_Binary_to_Hex(Знач СтрокаBinary)
	
	Результат= "";
	
	СтрокаBinary= ДобавитьЛидирующиеНули(СтрокаBinary, (4-СтрДлина(СтрокаBinary)%4)%4);
	ДлинаСтроки= СтрДлина(СтрокаBinary);
	
	Позиция= 1;
	Пока Позиция < ДлинаСтроки Цикл 
		
		СтрокаHex= КонвертацияBase64().Convert_Binary_to_Hex[Сред(СтрокаBinary, Позиция, 4)];
		
		Если СтрокаHex <> Неопределено Тогда
			Результат= Результат + СтрокаHex;
		Иначе
			ВызватьИсключение "Ошибка конвертации двоичных данных в шестнадцатиричные!";
		КонецЕсли;
		
		Позиция= Позиция + 4;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция Convert_Base64_to_Binary(СтрокаBase64)
	
	Результат= "";
	
	ДлинаСтроки= СтрДлина(СтрокаBase64);
	
	Позиция= 1;
	Пока Позиция <= ДлинаСтроки Цикл
		
		СтрокаBinary= КонвертацияBase64().Convert_Base64_to_Binary[Сред(СтрокаBase64, Позиция, 1)];
		
		Если СтрокаBinary <> Неопределено Тогда
			Результат= Результат + СтрокаBinary;
		Иначе
			ВызватьИсключение "Ошибка конвертации Base64 строки """ + СтрокаBase64 + """ в двоичные данные!";
		КонецЕсли;
		
		Позиция= Позиция + 1;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция Convert_Hex_to_GUID(СтрокаHex)
	
	Возврат Сред(СтрокаHex, 1, 8)+"-"+Сред(СтрокаHex, 9, 4)+"-"+Сред(СтрокаHex, 13, 4)+"-"+Сред(СтрокаHex, 17, 4)+"-"+Сред(СтрокаHex, 21, 20)+"-"+Сред(СтрокаHex, 41, 4)+"-"+Сред(СтрокаHex, 45, 4)+"-"+Сред(СтрокаHex, 49, 4)+"-"+Сред(СтрокаHex, 53, 12);
	
КонецФункции

Функция Convert_GUID_to_Hex(GUID)
	
	Возврат СтрЗаменить(GUID, "-", "");
	
КонецФункции

&НаКлиенте
Процедура ITS_ДиадокПолучитьСтатусДиадокПосле(Команда)   
	Элементы.СтатусДиадок.Видимость = Истина;
	ВС = Элементы.СписокДокументыЗакупки.ВыделенныеСтроки;
	МассивДокументов = Новый Массив;
	Для Каждого Эл ИЗ ВС Цикл
	  ДС = Элементы.СписокДокументыЗакупки.ДанныеСтроки(Эл); 
	  МассивДокументов.Добавить(ДС.Ссылка);
  КонецЦикла;
  
  ДополнительныеПараметры = Новый Структура;
  ДополнительныеПараметры.Вставить("Ссылка", МассивДокументов);
  
  
  Если НЕ ЗначениеЗаполнено(ЛогинДиадок()) ИЛИ НЕ ЗначениеЗаполнено(ПарольДиадок()) Тогда
	  ОткрытьФорму("ОбщаяФорма.ФормаЗапросаДанныхДиадока",
	  ,,,,,Новый ОписаниеОповещения("ПолучитьСтатусДиадокОповещение", ЭтотОбъект, ДополнительныеПараметры));
  Иначе
	  ПолучитьСтатусДиадокЗавершение(МассивДокументов);
  КонецЕсли; 
  Элементы.СписокДокументыЗакупки.Обновить();
КонецПроцедуры
   
&НаКлиенте
Процедура ПолучитьСтатусДиадокОповещение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		УстановитьЗначениеПараметраСеанса("ЛогинДиадок", ВыбранноеЗначение.Логин);
		УстановитьЗначениеПараметраСеанса("ПарольДиадок", ВыбранноеЗначение.Пароль);
		УстановитьЗначениеПараметраСеанса("КлючРазработчикаДиадок", ВыбранноеЗначение.КлючРазработчикаДиадок); 
	КонецЕсли;
	
	Ссылка = ДополнительныеПараметры.Ссылка;
	ПолучитьСтатусДиадокЗавершение(Ссылка)
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтатусДиадокЗавершение(МассивДокументов)  
	ЛогинДиадок = ЛогинДиадок();
	ПарольДиадок = ПарольДиадок();
	КлючРазработчикаДиадок = КлючРазработчикаДиадок();
	
	Для Каждого Документ ИЗ МассивДокументов Цикл
	СтатусДиадок = ПолучитьСтруктуруДокументаПоAPIДиадок(ЛогинДиадок,ПарольДиадок,КлючРазработчикаДиадок,Документ);   
	
    Если ЗначениеЗаполнено(СтатусДиадок) Тогда   
		ДобавитьЗаписиВРС(СтатусДиадок, Документ); 
	КонецЕсли;
	КонецЦикла;
КонецПроцедуры 

Процедура ДобавитьЗаписиВРС(Статус, Документ) 
	СвДата = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("ИдентификаторДляФормул", "ДатаПолученияСтатуса");
	СвСтатус = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("ИдентификаторДляФормул", "СтатусДиадок");
	
	ДопСведенияНаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	ДопСведенияНаборЗаписей.Отбор.Объект.Установить(Документ);
	ДопСведенияНаборЗаписей.Отбор.Свойство.Установить(СвДата);
	ДопСведенияНаборЗаписей.Прочитать();
	Если ДопСведенияНаборЗаписей.Количество() = 0 Тогда 
		НовЗапись = ДопСведенияНаборЗаписей.Добавить();
	
	Иначе
		НовЗапись = ДопСведенияНаборЗаписей[0];
	КонецЕсли;
	
	
	
	НовЗапись.Объект   = Документ;
	НовЗапись.Свойство = СвДата;
	НовЗапись.Значение = ТекущаяДата();
	ДопСведенияНаборЗаписей.Записать(Истина);
	
	//Запишем сам статус строкой
	ДопСведенияНаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	ДопСведенияНаборЗаписей.Отбор.Объект.Установить(Документ);
	ДопСведенияНаборЗаписей.Отбор.Свойство.Установить(СвСтатус);
	ДопСведенияНаборЗаписей.Прочитать();
	Если ДопСведенияНаборЗаписей.Количество() = 0 Тогда 
		НовЗапись = ДопСведенияНаборЗаписей.Добавить();
	
	Иначе
		НовЗапись = ДопСведенияНаборЗаписей[0];
	КонецЕсли;
	
	
	
	НовЗапись.Объект   = Документ;
	НовЗапись.Свойство = СвСтатус;
	НовЗапись.Значение = Статус;
	
	ДопСведенияНаборЗаписей.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ITS_ДиадокПриОткрытииПосле(Отказ)
	Элементы.СтатусДиадок.Видимость = Ложь;
КонецПроцедуры

//&ИзменениеИКонтроль("ТекстЗапросаСписокДокументыЗакупки")
&Вместо("ТекстЗапросаСписокДокументыЗакупки")
Функция ITS_ДиадокТекстЗапросаСписокДокументыЗакупки()
	
	ТекстЗапроса =
	
	"ВЫБРАТЬ
	|	РеестрДокументов.Ссылка КАК Ссылка,
	|	РеестрДокументов.НомерДокументаИБ КАК Номер,
	|	РеестрДокументов.ДатаДокументаИБ КАК Дата,
	|	РеестрДокументов.Статус,
	|	РеестрДокументов.Проведен,
	|	РеестрДокументов.ПометкаУдаления,
	|	РеестрДокументов.ХозяйственнаяОперация,
	|	РеестрДокументов.Партнер,
	|	ВЫРАЗИТЬ(РеестрДокументов.Контрагент.Ключ КАК Справочник.Контрагенты) КАК Контрагент,
	|	РеестрДокументов.Контрагент КАК КонтрагентКлюч,
	|	РеестрДокументов.Договор,
	|	РеестрДокументов.Организация,
	|	РеестрДокументов.Подразделение,
	|	РеестрДокументов.МестоХранения КАК МестоХранения,
	|	ВЫРАЗИТЬ(РеестрДокументов.МестоХранения.Ключ КАК Справочник.Склады) КАК Склад,
	|	РеестрДокументов.Валюта,
	|	РеестрДокументов.Сумма КАК СуммаДокумента,
	|	РеестрДокументов.Ответственный КАК Менеджер,
	|	РеестрДокументов.Автор КАК Автор,
	|	РеестрДокументов.Комментарий,
	|	РеестрДокументов.НомерПервичногоДокумента КАК НомерВходящегоДокумента,
	|	РеестрДокументов.ДатаПервичногоДокумента КАК ДатаВходящегоДокумента,
	|	РеестрДокументов.Дополнительно,
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	|	СостоянияЭД.СостояниеЭДО,
	|	СостоянияЭД.ПредставлениеСостояния КАК ПредставлениеСостояния,	
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	|	ВЫБОР
	|		КОГДА ДокументыСОшибкамиПроверкиКонтрагентов.Документ ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьОшибкиПроверкиКонтрагентов,
	|	ВЫБОР
	|		КОГДА РеестрДокументов.Проведен
	|			ТОГДА 0
	|		КОГДА РеестрДокументов.ПометкаУдаления
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК НестандартнаяКартинка,
	|	РеестрДокументов.ДополнительнаяЗапись,
	|	РеестрДокументов.ТипСсылки,
	|	ТИПЗНАЧЕНИЯ(РеестрДокументов.Ссылка) КАК ТипЗначения,
	|	&СтатусПроверки КАК СтатусПроверки,
	|	&ИндикаторПроверки КАК ИндикаторПроверки,
	|	РеестрДокументов.СторноИсправление КАК СторноИсправление,
	|	ВЫБОР
	|		КОГДА НЕ РеестрДокументов.СторноИсправление
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ РеестрДокументов.СторнируемыйДокумент
	|	КОНЕЦ КАК СторнируемыйИсправляемыйДокумент,
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	|	NULL КАК СостояниеОригиналаПервичногоДокумента,
	|	ИСТИНА КАК ОбщееСостояние,
	|	0 КАК СостояниеОригиналПолучен,
	|	ВЫРАЗИТЬ("""" КАК Строка(50)) КАК СостояниеГИСМТ
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	|,ВЫБОР
	|	КОГДА ЕСТЬNULL(ДатаПолучСтатуса.Значение, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) >= &НачалоТекДата
	|			И ЕСТЬNULL(ДатаПолучСтатуса.Значение, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) <= &КонецТекДата
	|		ТОГДА Статус_Диадок.Значение
	|	ИНАЧЕ """"
	|КОНЕЦ КАК СтатусДиадок ,
	|ВЫБОР
	|	КОГДА ЕСТЬNULL(ДополнительныеСведения.Значение, """") = """"
	|		ТОГДА ЛОЖЬ
	|	ИНАЧЕ ИСТИНА
	|КОНЕЦ КАК СозданВДиадок
	|{ГДЕ
	|	РеестрДокументов.Ссылка.* КАК Ссылка,
	|	РеестрДокументов.МестоХранения.* КАК МестоХранения,
	|	ВЫРАЗИТЬ(РеестрДокументов.МестоХранения.Ключ КАК Справочник.Склады).* КАК Склад,
	|	РеестрДокументов.Организация.* КАК Организация,
	|	РеестрДокументов.ДатаДокументаИБ КАК Дата,
	|	РеестрДокументов.НомерДокументаИБ КАК Номер,
	|	РеестрДокументов.Статус КАК Статус,
	|	РеестрДокументов.ТипСсылки КАК ТипСсылки,
	|	РеестрДокументов.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	РеестрДокументов.Партнер.* КАК Партнер,
	|	ВЫРАЗИТЬ(РеестрДокументов.Контрагент.Ключ КАК Справочник.Контрагенты).* КАК Контрагент,
	|	РеестрДокументов.Договор.* КАК Договор,
	|	РеестрДокументов.Подразделение.* КАК Подразделение,
	|	РеестрДокументов.Ответственный.* КАК Менеджер,
	|	РеестрДокументов.Автор.* КАК Автор,
	|	РеестрДокументов.Дополнительно КАК Дополнительно,
	|	РеестрДокументов.Комментарий КАК Комментарий,
	|	РеестрДокументов.Проведен КАК Проведен,
	|	РеестрДокументов.ПометкаУдаления КАК ПометкаУдаления,
	|	(РеестрДокументов.ДатаДокументаИБ >= &НачалоПериода
	|	И РеестрДокументов.ДатаДокументаИБ <= &КонецПериода)}
	|ИЗ
	|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|		{
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияПоОбъектамУчетаЭДО КАК СостоянияЭД
	|		ПО (СостоянияЭД.СсылкаНаОбъект = РеестрДокументов.Ссылка)
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыСОшибкамиПроверкиКонтрагентов КАК ДокументыСОшибкамиПроверкиКонтрагентов
	|		ПО РеестрДокументов.Ссылка = ДокументыСОшибкамиПроверкиКонтрагентов.Документ
	|		И (&ИспользованиеПроверкиВозможно)
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДатаПолучСтатуса
	|	ПО РеестрДокументов.Ссылка = ДатаПолучСтатуса.Объект
	|		И (ДатаПолучСтатуса.Свойство.ИдентификаторДляФормул = ""ДатаПолученияСтатуса"")
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК Статус_Диадок
	|	ПО РеестрДокументов.Ссылка = Статус_Диадок.Объект
	|		И (Статус_Диадок.Свойство.ИдентификаторДляФормул = ""СтатусДиадок"")
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|	ПО РеестрДокументов.Ссылка = ДополнительныеСведения.Объект
	|		И (ДополнительныеСведения.Свойство.ИдентификаторДляФормул = ""ИдентификаторЯщикДокументаВДиадок"")
	//#КонецВставки
	|}";

	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Процедура ITS_ДиадокПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	//а=1;
	СписокДокументыЗакупки.Параметры.УстановитьЗначениеПараметра(
		"НачалоТекДата", 
		НачалоДня(ТекущаяДата()));
		
	СписокДокументыЗакупки.Параметры.УстановитьЗначениеПараметра(
		"КонецТекДата", 
		КонецДня(ТекущаяДата()));
	
КонецПроцедуры




 